ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"bluetooth.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.sendDataBluetooth,"ax",%progbits
  18              		.align	1
  19              		.global	sendDataBluetooth
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	sendDataBluetooth:
  27              	.LFB860:
  28              		.file 1 "Src/bluetooth.c"
   1:Src/bluetooth.c **** 
   2:Src/bluetooth.c **** #include "bluetooth.h"
   3:Src/bluetooth.c **** #include "main.h"
   4:Src/bluetooth.c **** #include "definitions.h"
   5:Src/bluetooth.c **** #include "draw.h"
   6:Src/bluetooth.c **** #include "ws2812.h"
   7:Src/bluetooth.c **** #include "minihdlc-master/minihdlc.h"
   8:Src/bluetooth.c **** 
   9:Src/bluetooth.c **** void sendDataBluetooth(uint8_t data)
  10:Src/bluetooth.c **** {
  29              		.loc 1 10 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
  35              	.L2:
  11:Src/bluetooth.c ****   while (!LL_USART_IsActiveFlag_TXE(USART1))
  12:Src/bluetooth.c ****   {
  13:Src/bluetooth.c ****   }
  36              		.loc 1 13 3 discriminator 1 view .LVU1
  37              	.LBB18:
  38              	.LBI18:
  39              		.file 2 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h"
   1:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
   2:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   ******************************************************************************
   3:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @file    stm32f4xx_ll_usart.h
   4:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @author  MCD Application Team
   5:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief   Header file of USART LL module.
   6:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   ******************************************************************************
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 2


   7:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @attention
   8:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *
   9:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
  10:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * All rights reserved.</center></h2>
  11:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *
  12:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * the "License"; You may not use this file except in compliance with the
  14:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * License. You may obtain a copy of the License at:
  15:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *
  17:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   ******************************************************************************
  18:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
  19:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  20:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  21:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #ifndef __STM32F4xx_LL_USART_H
  22:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define __STM32F4xx_LL_USART_H
  23:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  24:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #ifdef __cplusplus
  25:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** extern "C" {
  26:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #endif
  27:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  28:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Includes ------------------------------------------------------------------*/
  29:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #include "stm32f4xx.h"
  30:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  31:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @addtogroup STM32F4xx_LL_Driver
  32:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
  33:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
  34:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  35:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #if defined (USART1) || defined (USART2) || defined (USART3) || defined (USART6) || defined (UART4)
  36:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  37:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL USART
  38:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
  39:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
  40:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  41:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Private types -------------------------------------------------------------*/
  42:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Private variables ---------------------------------------------------------*/
  43:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  44:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Private constants ---------------------------------------------------------*/
  45:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_Private_Constants USART Private Constants
  46:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
  47:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
  48:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  49:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Defines used for the bit position in the register and perform offsets*/
  50:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define USART_POSITION_GTPR_GT                  USART_GTPR_GT_Pos
  51:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
  52:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
  53:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
  54:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  55:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Private macros ------------------------------------------------------------*/
  56:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  57:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_Private_Macros USART Private Macros
  58:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
  59:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
  60:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
  61:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
  62:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
  63:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 3


  64:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  65:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Exported types ------------------------------------------------------------*/
  66:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  67:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_ES_INIT USART Exported Init structures
  68:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
  69:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
  70:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  71:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
  72:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief LL USART Init Structure definition
  73:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
  74:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** typedef struct
  75:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
  76:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t BaudRate;                  /*!< This field defines expected Usart communication baud rat
  77:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  78:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
  79:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  80:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t DataWidth;                 /*!< Specifies the number of data bits transmitted or receive
  81:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DATAWI
  82:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  83:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
  84:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  85:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t StopBits;                  /*!< Specifies the number of stop bits transmitted.
  86:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_STOPBI
  87:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  88:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
  89:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  90:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t Parity;                    /*!< Specifies the parity mode.
  91:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PARITY
  92:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  93:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
  94:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  95:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t TransferDirection;         /*!< Specifies whether the Receive and/or Transmit mode is en
  96:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DIRECT
  97:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  98:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
  99:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 100:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t HardwareFlowControl;       /*!< Specifies whether the hardware flow control mode is enab
 101:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_HWCONT
 102:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 103:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 104:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 105:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t OverSampling;              /*!< Specifies whether USART oversampling mode is 16 or 8.
 106:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_OVERSA
 107:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 108:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 109:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 110:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** } LL_USART_InitTypeDef;
 111:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 112:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 113:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief LL USART Clock Init Structure definition
 114:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 115:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** typedef struct
 116:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 117:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t ClockOutput;               /*!< Specifies whether the USART clock is enabled or disabled
 118:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_CLOCK.
 119:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 120:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 4


 121:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            @ref LL_USART_EnableSCLKOutput() or @ref LL_USART_Disabl
 122:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            For more details, refer to description of this function.
 123:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 124:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t ClockPolarity;             /*!< Specifies the steady state of the serial clock.
 125:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_POLARI
 126:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 127:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 128:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            For more details, refer to description of this function.
 129:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 130:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t ClockPhase;                /*!< Specifies the clock transition on which the bit capture 
 131:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PHASE.
 132:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 133:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 134:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            For more details, refer to description of this function.
 135:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 136:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t LastBitClockPulse;         /*!< Specifies whether the clock pulse corresponding to the l
 137:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            data bit (MSB) has to be output on the SCLK pin in synch
 138:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_LASTCL
 139:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 140:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 141:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            For more details, refer to description of this function.
 142:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 143:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** } LL_USART_ClockInitTypeDef;
 144:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 145:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 146:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 147:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 148:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #endif /* USE_FULL_LL_DRIVER */
 149:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 150:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Exported constants --------------------------------------------------------*/
 151:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Constants USART Exported Constants
 152:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 153:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 154:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 155:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_GET_FLAG Get Flags Defines
 156:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief    Flags defines which can be used with LL_USART_ReadReg function
 157:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 158:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 159:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_PE                          USART_SR_PE                   /*!< Parity error fla
 160:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_FE                          USART_SR_FE                   /*!< Framing error fl
 161:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_NE                          USART_SR_NE                   /*!< Noise detected f
 162:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_ORE                         USART_SR_ORE                  /*!< Overrun error fl
 163:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_IDLE                        USART_SR_IDLE                 /*!< Idle line detect
 164:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_RXNE                        USART_SR_RXNE                 /*!< Read data regist
 165:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_TC                          USART_SR_TC                   /*!< Transmission com
 166:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_TXE                         USART_SR_TXE                  /*!< Transmit data re
 167:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_LBD                         USART_SR_LBD                  /*!< LIN break detect
 168:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_CTS                         USART_SR_CTS                  /*!< CTS flag */
 169:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 170:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 171:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 172:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 173:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_IT IT Defines
 174:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief    IT defines which can be used with LL_USART_ReadReg and  LL_USART_WriteReg functions
 175:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 176:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 177:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR1_IDLEIE                     USART_CR1_IDLEIE              /*!< IDLE interrupt e
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 5


 178:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR1_RXNEIE                     USART_CR1_RXNEIE              /*!< Read data regist
 179:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR1_TCIE                       USART_CR1_TCIE                /*!< Transmission com
 180:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR1_TXEIE                      USART_CR1_TXEIE               /*!< Transmit data re
 181:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR1_PEIE                       USART_CR1_PEIE                /*!< Parity error */
 182:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR2_LBDIE                      USART_CR2_LBDIE               /*!< LIN break detect
 183:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR3_EIE                        USART_CR3_EIE                 /*!< Error interrupt 
 184:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR3_CTSIE                      USART_CR3_CTSIE               /*!< CTS interrupt en
 185:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 186:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 187:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 188:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 189:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_DIRECTION Communication Direction
 190:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 191:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 192:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_DIRECTION_NONE                 0x00000000U                        /*!< Transmitter
 193:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_DIRECTION_RX                   USART_CR1_RE                       /*!< Transmitter
 194:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_DIRECTION_TX                   USART_CR1_TE                       /*!< Transmitter
 195:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_DIRECTION_TX_RX                (USART_CR1_TE |USART_CR1_RE)       /*!< Transmitter
 196:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 197:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 198:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 199:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 200:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_PARITY Parity Control
 201:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 202:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 203:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_PARITY_NONE                    0x00000000U                          /*!< Parity co
 204:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_PARITY_EVEN                    USART_CR1_PCE                        /*!< Parity co
 205:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_PARITY_ODD                     (USART_CR1_PCE | USART_CR1_PS)       /*!< Parity co
 206:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 207:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 208:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 209:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 210:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_WAKEUP Wakeup
 211:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 212:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 213:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_WAKEUP_IDLELINE                0x00000000U           /*!<  USART wake up from Mute
 214:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_WAKEUP_ADDRESSMARK             USART_CR1_WAKE        /*!<  USART wake up from Mute
 215:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 216:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 217:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 218:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 219:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_DATAWIDTH Datawidth
 220:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 221:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 222:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_DATAWIDTH_8B                   0x00000000U             /*!< 8 bits word length : S
 223:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_DATAWIDTH_9B                   USART_CR1_M             /*!< 9 bits word length : S
 224:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 225:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 226:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 227:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 228:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_OVERSAMPLING Oversampling
 229:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 230:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 231:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_OVERSAMPLING_16                0x00000000U            /*!< Oversampling by 16 */
 232:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_OVERSAMPLING_8                 USART_CR1_OVER8        /*!< Oversampling by 8 */
 233:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 234:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 6


 235:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 236:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 237:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
 238:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_CLOCK Clock Signal
 239:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 240:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 241:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 242:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CLOCK_DISABLE                  0x00000000U            /*!< Clock signal not provid
 243:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CLOCK_ENABLE                   USART_CR2_CLKEN        /*!< Clock signal provided *
 244:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 245:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 246:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 247:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
 248:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 249:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_LASTCLKPULSE Last Clock Pulse
 250:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 251:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 252:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_NO_OUTPUT         0x00000000U           /*!< The clock pulse of the l
 253:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_OUTPUT            USART_CR2_LBCL        /*!< The clock pulse of the l
 254:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 255:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 256:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 257:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 258:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_PHASE Clock Phase
 259:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 260:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 261:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_PHASE_1EDGE                    0x00000000U           /*!< The first clock transiti
 262:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_PHASE_2EDGE                    USART_CR2_CPHA        /*!< The second clock transit
 263:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 264:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 265:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 266:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 267:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_POLARITY Clock Polarity
 268:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 269:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 270:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_POLARITY_LOW                   0x00000000U           /*!< Steady low value on SCLK
 271:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_POLARITY_HIGH                  USART_CR2_CPOL        /*!< Steady high value on SCL
 272:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 273:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 274:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 275:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 276:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_STOPBITS Stop Bits
 277:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 278:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 279:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_STOPBITS_0_5                   USART_CR2_STOP_0                           /*!< 0.5
 280:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_STOPBITS_1                     0x00000000U                                /*!< 1 s
 281:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_STOPBITS_1_5                   (USART_CR2_STOP_0 | USART_CR2_STOP_1)      /*!< 1.5
 282:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_STOPBITS_2                     USART_CR2_STOP_1                           /*!< 2 s
 283:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 284:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 285:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 286:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 287:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_HWCONTROL Hardware Control
 288:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 289:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 290:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_HWCONTROL_NONE                 0x00000000U                          /*!< CTS and R
 291:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS                  USART_CR3_RTSE                       /*!< RTS outpu
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 7


 292:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_HWCONTROL_CTS                  USART_CR3_CTSE                       /*!< CTS mode 
 293:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS_CTS              (USART_CR3_RTSE | USART_CR3_CTSE)    /*!< CTS and R
 294:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 295:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 296:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 297:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 298:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_IRDA_POWER IrDA Power
 299:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 300:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 301:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_IRDA_POWER_NORMAL              0x00000000U           /*!< IrDA normal power mode *
 302:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_IRDA_POWER_LOW                 USART_CR3_IRLP        /*!< IrDA low power mode */
 303:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 304:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 305:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 306:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 307:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_LINBREAK_DETECT LIN Break Detection Length
 308:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 309:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 310:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_10B            0x00000000U           /*!< 10-bit break detection m
 311:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_11B            USART_CR2_LBDL        /*!< 11-bit break detection m
 312:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 313:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 314:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 315:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 316:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 317:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 318:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 319:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 320:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Exported macro ------------------------------------------------------------*/
 321:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Macros USART Exported Macros
 322:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 323:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 324:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 325:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EM_WRITE_READ Common Write and read registers Macros
 326:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 327:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 328:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 329:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 330:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Write a value in USART register
 331:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 332:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  __REG__ Register to be written
 333:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  __VALUE__ Value to be written in the register
 334:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 335:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 336:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VAL
 337:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 338:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 339:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Read a value in USART register
 340:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 341:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  __REG__ Register to be read
 342:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Register value
 343:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 344:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 345:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 346:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 347:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 348:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 8


 349:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EM_Exported_Macros_Helper Exported_Macros_Helper
 350:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 351:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 352:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 353:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 354:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 355:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         expected Baud Rate in 8 bits sampling mode (32 bits value of USARTDIV is returned)
 356:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 357:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 358:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_8 case
 359:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 360:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING8_100(__PERIPHCLK__, __BAUDRATE__)      ((uint32_t)((((uint64_t)(__P
 361:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIVMANT_SAMPLING8(__PERIPHCLK__, __BAUDRATE__)      (__LL_USART_DIV_SAMPLING8_10
 362:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIVFRAQ_SAMPLING8(__PERIPHCLK__, __BAUDRATE__)      ((((__LL_USART_DIV_SAMPLING8
 363:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* UART BRR = mantissa + overflow + fraction
 364:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****             = (UART DIVMANT << 4) + ((UART DIVFRAQ & 0xF8) << 1) + (UART DIVFRAQ & 0x07) */
 365:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING8(__PERIPHCLK__, __BAUDRATE__)             (((__LL_USART_DIVMANT_SAM
 366:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                                                            ((__LL_USART_DIVFRAQ_SAM
 367:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                                                            (__LL_USART_DIVFRAQ_SAMP
 368:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 369:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 370:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 371:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         expected Baud Rate in 16 bits sampling mode (32 bits value of USARTDIV is returned)
 372:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 373:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 374:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_16 case
 375:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 376:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING16_100(__PERIPHCLK__, __BAUDRATE__)     ((uint32_t)((((uint64_t)(__P
 377:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIVMANT_SAMPLING16(__PERIPHCLK__, __BAUDRATE__)     (__LL_USART_DIV_SAMPLING16_1
 378:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIVFRAQ_SAMPLING16(__PERIPHCLK__, __BAUDRATE__)     ((((__LL_USART_DIV_SAMPLING1
 379:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* USART BRR = mantissa + overflow + fraction
 380:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****             = (USART DIVMANT << 4) + (USART DIVFRAQ & 0xF0) + (USART DIVFRAQ & 0x0F) */
 381:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING16(__PERIPHCLK__, __BAUDRATE__)            (((__LL_USART_DIVMANT_SAM
 382:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                                                            (__LL_USART_DIVFRAQ_SAMP
 383:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                                                            (__LL_USART_DIVFRAQ_SAMP
 384:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 385:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 386:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 387:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 388:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 389:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 390:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 391:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 392:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 393:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Exported functions --------------------------------------------------------*/
 394:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 395:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Functions USART Exported Functions
 396:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 397:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 398:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 399:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration Configuration functions
 400:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 401:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 402:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 403:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 404:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  USART Enable
 405:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Enable
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 9


 406:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 407:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 408:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 409:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
 410:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 411:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_UE);
 412:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 413:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 414:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 415:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  USART Disable (all USART prescalers and outputs are disabled)
 416:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   When USART is disabled, USART prescalers and outputs are stopped immediately,
 417:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         and current operations are discarded. The configuration of the USART is kept, but all t
 418:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         flags, in the USARTx_SR are set to their default values.
 419:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Disable
 420:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 421:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 422:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 423:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
 424:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 425:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 426:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 427:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 428:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 429:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if USART is enabled
 430:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_IsEnabled
 431:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 432:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 433:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 434:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
 435:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 436:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 437:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 438:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 439:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 440:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Receiver Enable (Receiver is enabled and begins searching for a start bit)
 441:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_EnableDirectionRx
 442:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 443:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 444:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 445:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionRx(USART_TypeDef *USARTx)
 446:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 447:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_RE);
 448:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 449:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 450:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 451:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Receiver Disable
 452:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_DisableDirectionRx
 453:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 454:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 455:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 456:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionRx(USART_TypeDef *USARTx)
 457:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 458:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_RE);
 459:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 460:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 461:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 462:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Transmitter Enable
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 10


 463:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_EnableDirectionTx
 464:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 465:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 466:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 467:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionTx(USART_TypeDef *USARTx)
 468:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 469:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_TE);
 470:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 471:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 472:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 473:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Transmitter Disable
 474:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_DisableDirectionTx
 475:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 476:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 477:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 478:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionTx(USART_TypeDef *USARTx)
 479:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 480:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_TE);
 481:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 482:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 483:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 484:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure simultaneously enabled/disabled states
 485:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         of Transmitter and Receiver
 486:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_SetTransferDirection\n
 487:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR1          TE            LL_USART_SetTransferDirection
 488:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 489:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  TransferDirection This parameter can be one of the following values:
 490:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
 491:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
 492:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
 493:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
 494:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 495:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 496:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirectio
 497:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 498:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 499:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 500:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 501:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 502:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return enabled/disabled states of Transmitter and Receiver
 503:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_GetTransferDirection\n
 504:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR1          TE            LL_USART_GetTransferDirection
 505:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 506:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 507:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
 508:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
 509:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
 510:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
 511:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 512:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTransferDirection(USART_TypeDef *USARTx)
 513:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 514:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_RE | USART_CR1_TE));
 515:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 516:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 517:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 518:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure Parity (enabled/disabled and parity mode if enabled).
 519:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   This function selects if hardware parity control (generation and detection) is enabled 
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 11


 520:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         When the parity control is enabled (Odd or Even), computed parity bit is inserted at th
 521:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (9th or 8th bit depending on data width) and parity is checked on the received data.
 522:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_SetParity\n
 523:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR1          PCE           LL_USART_SetParity
 524:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 525:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
 526:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 527:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 528:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 529:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 530:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 531:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetParity(USART_TypeDef *USARTx, uint32_t Parity)
 532:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 533:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 534:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 535:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 536:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 537:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return Parity configuration (enabled/disabled and parity mode if enabled)
 538:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_GetParity\n
 539:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR1          PCE           LL_USART_GetParity
 540:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 541:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 542:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 543:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 544:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 545:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 546:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
 547:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 548:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 549:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 550:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 551:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 552:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set Receiver Wake Up method from Mute mode.
 553:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_SetWakeUpMethod
 554:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 555:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  Method This parameter can be one of the following values:
 556:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
 557:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
 558:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 559:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 560:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetWakeUpMethod(USART_TypeDef *USARTx, uint32_t Method)
 561:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 562:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_WAKE, Method);
 563:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 564:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 565:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 566:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return Receiver Wake Up method from Mute mode
 567:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_GetWakeUpMethod
 568:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 569:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 570:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
 571:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
 572:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 573:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetWakeUpMethod(USART_TypeDef *USARTx)
 574:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 575:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_WAKE));
 576:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 12


 577:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 578:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 579:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set Word length (i.e. nb of data bits, excluding start and stop bits)
 580:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          M             LL_USART_SetDataWidth
 581:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 582:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
 583:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 584:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 585:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 586:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 587:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDataWidth(USART_TypeDef *USARTx, uint32_t DataWidth)
 588:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 589:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 590:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 591:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 592:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 593:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return Word length (i.e. nb of data bits, excluding start and stop bits)
 594:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          M             LL_USART_GetDataWidth
 595:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 596:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 597:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 598:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 599:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 600:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDataWidth(USART_TypeDef *USARTx)
 601:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 602:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 603:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 604:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 605:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 606:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set Oversampling to 8-bit or 16-bit mode
 607:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_SetOverSampling
 608:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 609:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
 610:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
 611:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
 612:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 613:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 614:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
 615:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 616:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 617:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 618:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 619:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 620:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return Oversampling mode
 621:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_GetOverSampling
 622:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 623:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 624:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
 625:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
 626:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 627:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetOverSampling(USART_TypeDef *USARTx)
 628:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 629:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_OVER8));
 630:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 631:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 632:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 633:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure if Clock pulse of the last data bit is output to the SCLK pin or not
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 13


 634:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 635:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 636:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_SetLastClkPulseOutput
 637:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 638:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  LastBitClockPulse This parameter can be one of the following values:
 639:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 640:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 641:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 642:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 643:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLastClkPulseOutput(USART_TypeDef *USARTx, uint32_t LastBitClockPul
 644:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 645:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBCL, LastBitClockPulse);
 646:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 647:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 648:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 649:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Retrieve Clock pulse of the last data bit output configuration
 650:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (Last bit Clock pulse output to the SCLK pin or not)
 651:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 652:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 653:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_GetLastClkPulseOutput
 654:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 655:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 656:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 657:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 658:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 659:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLastClkPulseOutput(USART_TypeDef *USARTx)
 660:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 661:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBCL));
 662:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 663:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 664:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 665:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Select the phase of the clock output on the SCLK pin in synchronous mode
 666:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 667:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 668:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_SetClockPhase
 669:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 670:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  ClockPhase This parameter can be one of the following values:
 671:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 672:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 673:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 674:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 675:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPhase(USART_TypeDef *USARTx, uint32_t ClockPhase)
 676:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 677:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA, ClockPhase);
 678:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 679:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 680:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 681:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return phase of the clock output on the SCLK pin in synchronous mode
 682:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 683:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 684:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_GetClockPhase
 685:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 686:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 687:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 688:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 689:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 690:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPhase(USART_TypeDef *USARTx)
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 14


 691:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 692:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPHA));
 693:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 694:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 695:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 696:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Select the polarity of the clock output on the SCLK pin in synchronous mode
 697:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 698:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 699:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_SetClockPolarity
 700:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 701:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  ClockPolarity This parameter can be one of the following values:
 702:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 703:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 704:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 705:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 706:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPolarity(USART_TypeDef *USARTx, uint32_t ClockPolarity)
 707:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 708:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPOL, ClockPolarity);
 709:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 710:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 711:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 712:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return polarity of the clock output on the SCLK pin in synchronous mode
 713:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 714:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 715:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_GetClockPolarity
 716:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 717:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 718:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 719:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 720:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 721:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPolarity(USART_TypeDef *USARTx)
 722:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 723:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPOL));
 724:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 725:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 726:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 727:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure Clock signal format (Phase Polarity and choice about output of last bit clock
 728:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 729:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 730:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
 731:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clock Phase configuration using @ref LL_USART_SetClockPhase() function
 732:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clock Polarity configuration using @ref LL_USART_SetClockPolarity() function
 733:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Output of Last bit Clock pulse configuration using @ref LL_USART_SetLastClkPulseOutpu
 734:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_ConfigClock\n
 735:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          CPOL          LL_USART_ConfigClock\n
 736:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          LBCL          LL_USART_ConfigClock
 737:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 738:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  Phase This parameter can be one of the following values:
 739:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 740:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 741:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  Polarity This parameter can be one of the following values:
 742:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 743:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 744:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  LBCPOutput This parameter can be one of the following values:
 745:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 746:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 747:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 15


 748:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 749:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigClock(USART_TypeDef *USARTx, uint32_t Phase, uint32_t Polarity,
 750:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 751:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_LBCL, Phase | Polarity | LBCP
 752:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 753:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 754:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 755:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable Clock output on SCLK pin
 756:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 757:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 758:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_EnableSCLKOutput
 759:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 760:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 761:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 762:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSCLKOutput(USART_TypeDef *USARTx)
 763:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 764:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
 765:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 766:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 767:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 768:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable Clock output on SCLK pin
 769:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 770:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 771:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_DisableSCLKOutput
 772:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 773:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 774:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 775:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSCLKOutput(USART_TypeDef *USARTx)
 776:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 777:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
 778:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 779:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 780:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 781:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if Clock output on SCLK pin is enabled
 782:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 783:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 784:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_IsEnabledSCLKOutput
 785:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 786:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 787:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 788:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSCLKOutput(USART_TypeDef *USARTx)
 789:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 790:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_CLKEN) == (USART_CR2_CLKEN));
 791:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 792:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 793:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 794:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set the length of the stop bits
 795:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_SetStopBitsLength
 796:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 797:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
 798:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
 799:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
 800:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
 801:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
 802:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 803:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 804:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 16


 805:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 806:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 807:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 808:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 809:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 810:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Retrieve the length of the stop bits
 811:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_GetStopBitsLength
 812:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 813:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 814:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
 815:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
 816:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
 817:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
 818:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 819:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
 820:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 821:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 822:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 823:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 824:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 825:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure Character frame format (Datawidth, Parity control, Stop Bits)
 826:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
 827:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Data Width configuration using @ref LL_USART_SetDataWidth() function
 828:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Parity Control and mode configuration using @ref LL_USART_SetParity() function
 829:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Stop bits configuration using @ref LL_USART_SetStopBitsLength() function
 830:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_ConfigCharacter\n
 831:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR1          PCE           LL_USART_ConfigCharacter\n
 832:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR1          M             LL_USART_ConfigCharacter\n
 833:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigCharacter
 834:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 835:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
 836:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 837:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 838:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
 839:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 840:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 841:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 842:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
 843:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
 844:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
 845:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
 846:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
 847:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 848:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 849:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t P
 850:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                               uint32_t StopBits)
 851:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 852:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 853:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 854:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 855:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 856:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 857:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set Address of the USART node.
 858:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   This is used in multiprocessor communication during Mute mode or Stop mode,
 859:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         for wake up with address mark detection.
 860:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_SetNodeAddress
 861:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 17


 862:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  NodeAddress 4 bit Address of the USART node.
 863:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 864:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 865:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetNodeAddress(USART_TypeDef *USARTx, uint32_t NodeAddress)
 866:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 867:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_ADD, (NodeAddress & USART_CR2_ADD));
 868:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 869:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 870:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 871:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return 4 bit Address of the USART node as set in ADD field of CR2.
 872:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   only 4bits (b3-b0) of returned value are relevant (b31-b4 are not relevant)
 873:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_GetNodeAddress
 874:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 875:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Address of the USART node (Value between Min_Data=0 and Max_Data=255)
 876:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 877:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetNodeAddress(USART_TypeDef *USARTx)
 878:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 879:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ADD));
 880:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 881:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 882:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 883:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable RTS HW Flow Control
 884:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 885:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 886:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_EnableRTSHWFlowCtrl
 887:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 888:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 889:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 890:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableRTSHWFlowCtrl(USART_TypeDef *USARTx)
 891:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 892:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_RTSE);
 893:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 894:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 895:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 896:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable RTS HW Flow Control
 897:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 898:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 899:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_DisableRTSHWFlowCtrl
 900:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 901:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 902:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 903:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableRTSHWFlowCtrl(USART_TypeDef *USARTx)
 904:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 905:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_RTSE);
 906:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 907:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 908:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 909:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable CTS HW Flow Control
 910:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 911:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 912:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_EnableCTSHWFlowCtrl
 913:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 914:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 915:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 916:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableCTSHWFlowCtrl(USART_TypeDef *USARTx)
 917:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 918:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_CTSE);
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 18


 919:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 920:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 921:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 922:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable CTS HW Flow Control
 923:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 924:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 925:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_DisableCTSHWFlowCtrl
 926:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 927:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 928:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 929:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableCTSHWFlowCtrl(USART_TypeDef *USARTx)
 930:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 931:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_CTSE);
 932:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 933:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 934:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 935:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure HW Flow Control mode (both CTS and RTS)
 936:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 937:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 938:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_SetHWFlowCtrl\n
 939:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          CTSE          LL_USART_SetHWFlowCtrl
 940:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 941:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  HardwareFlowControl This parameter can be one of the following values:
 942:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
 943:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
 944:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
 945:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
 946:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 947:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 948:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
 949:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 950:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 951:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 952:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 953:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 954:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return HW Flow Control configuration (both CTS and RTS)
 955:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 956:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 957:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_GetHWFlowCtrl\n
 958:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          CTSE          LL_USART_GetHWFlowCtrl
 959:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 960:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 961:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
 962:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
 963:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
 964:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
 965:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 966:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
 967:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 968:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 969:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 970:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 971:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 972:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable One bit sampling method
 973:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_EnableOneBitSamp
 974:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 975:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 19


 976:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 977:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableOneBitSamp(USART_TypeDef *USARTx)
 978:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 979:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_ONEBIT);
 980:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 981:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 982:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 983:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable One bit sampling method
 984:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_DisableOneBitSamp
 985:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 986:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 987:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 988:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableOneBitSamp(USART_TypeDef *USARTx)
 989:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 990:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_ONEBIT);
 991:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 992:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 993:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 994:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if One bit sampling method is enabled
 995:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_IsEnabledOneBitSamp
 996:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 997:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 998:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 999:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledOneBitSamp(USART_TypeDef *USARTx)
1000:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1001:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_ONEBIT) == (USART_CR3_ONEBIT));
1002:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1003:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1004:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1005:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure USART BRR register for achieving expected Baud Rate value.
1006:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Compute and set USARTDIV value in BRR Register (full BRR content)
1007:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         according to used Peripheral Clock, Oversampling mode, and expected Baud Rate values
1008:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Peripheral clock and Baud rate values provided as function parameters should be valid
1009:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (Baud rate value != 0)
1010:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_SetBaudRate
1011:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1012:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1013:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1014:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1015:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1016:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  BaudRate Baud Rate
1017:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1018:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1019:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverS
1020:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                           uint32_t BaudRate)
1021:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1022:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   if (OverSampling == LL_USART_OVERSAMPLING_8)
1023:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   {
1024:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****     USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
1025:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   }
1026:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   else
1027:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   {
1028:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****     USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
1029:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   }
1030:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1031:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1032:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 20


1033:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return current Baud Rate value, according to USARTDIV present in BRR register
1034:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (full BRR content), and to used Peripheral Clock and Oversampling mode values
1035:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   In case of non-initialized or invalid value stored in BRR register, value 0 will be ret
1036:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_GetBaudRate
1037:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1038:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1039:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1040:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1041:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1042:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Baud Rate
1043:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1044:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t O
1045:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1046:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   register uint32_t usartdiv = 0x0U;
1047:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   register uint32_t brrresult = 0x0U;
1048:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1049:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   usartdiv = USARTx->BRR;
1050:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1051:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   if (OverSampling == LL_USART_OVERSAMPLING_8)
1052:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   {
1053:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****     if ((usartdiv & 0xFFF7U) != 0U)
1054:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****     {
1055:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****       usartdiv = (uint16_t)((usartdiv & 0xFFF0U) | ((usartdiv & 0x0007U) << 1U)) ;
1056:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****       brrresult = (PeriphClk * 2U) / usartdiv;
1057:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****     }
1058:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   }
1059:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   else
1060:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   {
1061:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****     if ((usartdiv & 0xFFFFU) != 0U)
1062:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****     {
1063:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****       brrresult = PeriphClk / usartdiv;
1064:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****     }
1065:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   }
1066:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (brrresult);
1067:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1068:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1069:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1070:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
1071:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1072:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1073:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_IRDA Configuration functions related to Irda feature
1074:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
1075:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1076:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1077:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1078:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable IrDA mode
1079:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1080:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1081:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_EnableIrda
1082:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1083:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1084:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1085:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIrda(USART_TypeDef *USARTx)
1086:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1087:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
1088:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1089:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 21


1090:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1091:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable IrDA mode
1092:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1093:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1094:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_DisableIrda
1095:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1096:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1097:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1098:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIrda(USART_TypeDef *USARTx)
1099:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1100:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_IREN);
1101:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1102:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1103:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1104:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if IrDA mode is enabled
1105:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1106:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1107:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_IsEnabledIrda
1108:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1109:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1110:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1111:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIrda(USART_TypeDef *USARTx)
1112:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1113:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_IREN) == (USART_CR3_IREN));
1114:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1115:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1116:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1117:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure IrDA Power Mode (Normal or Low Power)
1118:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1119:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1120:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_SetIrdaPowerMode
1121:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1122:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  PowerMode This parameter can be one of the following values:
1123:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
1124:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_LOW
1125:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1126:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1127:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPowerMode(USART_TypeDef *USARTx, uint32_t PowerMode)
1128:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1129:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_IRLP, PowerMode);
1130:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1131:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1132:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1133:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Retrieve IrDA Power Mode configuration (Normal or Low Power)
1134:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1135:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1136:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_GetIrdaPowerMode
1137:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1138:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1139:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
1140:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
1141:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1142:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPowerMode(USART_TypeDef *USARTx)
1143:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1144:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_IRLP));
1145:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1146:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 22


1147:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1148:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set Irda prescaler value, used for dividing the USART clock source
1149:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
1150:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1151:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1152:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetIrdaPrescaler
1153:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1154:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0x00 and Max_Data=0xFF
1155:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1156:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1157:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
1158:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1159:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_PSC, PrescalerValue);
1160:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1161:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1162:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1163:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return Irda prescaler value, used for dividing the USART clock source
1164:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
1165:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1166:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1167:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetIrdaPrescaler
1168:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1169:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Irda prescaler value (Value between Min_Data=0x00 and Max_Data=0xFF)
1170:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1171:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPrescaler(USART_TypeDef *USARTx)
1172:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1173:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
1174:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1175:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1176:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1177:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
1178:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1179:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1180:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_Smartcard Configuration functions related to Smartcard feat
1181:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
1182:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1183:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1184:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1185:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable Smartcard NACK transmission
1186:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1187:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1188:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_EnableSmartcardNACK
1189:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1190:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1191:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1192:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcardNACK(USART_TypeDef *USARTx)
1193:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1194:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_NACK);
1195:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1196:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1197:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1198:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable Smartcard NACK transmission
1199:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1200:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1201:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_DisableSmartcardNACK
1202:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1203:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 23


1204:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1205:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcardNACK(USART_TypeDef *USARTx)
1206:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1207:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_NACK);
1208:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1209:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1210:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1211:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if Smartcard NACK transmission is enabled
1212:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1213:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1214:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_IsEnabledSmartcardNACK
1215:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1216:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1217:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1218:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcardNACK(USART_TypeDef *USARTx)
1219:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1220:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_NACK) == (USART_CR3_NACK));
1221:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1222:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1223:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1224:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable Smartcard mode
1225:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1226:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1227:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_EnableSmartcard
1228:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1229:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1230:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1231:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcard(USART_TypeDef *USARTx)
1232:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1233:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
1234:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1235:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1236:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1237:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable Smartcard mode
1238:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1239:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1240:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_DisableSmartcard
1241:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1242:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1243:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1244:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcard(USART_TypeDef *USARTx)
1245:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1246:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_SCEN);
1247:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1248:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1249:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1250:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if Smartcard mode is enabled
1251:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1252:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1253:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_IsEnabledSmartcard
1254:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1255:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1256:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1257:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcard(USART_TypeDef *USARTx)
1258:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1259:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_SCEN) == (USART_CR3_SCEN));
1260:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 24


1261:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1262:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1263:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set Smartcard prescaler value, used for dividing the USART clock
1264:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
1265:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1266:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1267:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetSmartcardPrescaler
1268:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1269:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0 and Max_Data=31
1270:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1271:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1272:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
1273:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1274:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_PSC, PrescalerValue);
1275:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1276:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1277:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1278:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return Smartcard prescaler value, used for dividing the USART clock
1279:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
1280:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1281:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1282:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetSmartcardPrescaler
1283:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1284:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Smartcard prescaler value (Value between Min_Data=0 and Max_Data=31)
1285:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1286:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardPrescaler(USART_TypeDef *USARTx)
1287:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1288:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
1289:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1290:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1291:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1292:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set Smartcard Guard time value, expressed in nb of baud clocks periods
1293:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
1294:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1295:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1296:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_SetSmartcardGuardTime
1297:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1298:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  GuardTime Value between Min_Data=0x00 and Max_Data=0xFF
1299:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1300:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1301:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardGuardTime(USART_TypeDef *USARTx, uint32_t GuardTime)
1302:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1303:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_GT, GuardTime << USART_POSITION_GTPR_GT);
1304:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1305:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1306:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1307:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return Smartcard Guard time value, expressed in nb of baud clocks periods
1308:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
1309:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1310:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1311:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_GetSmartcardGuardTime
1312:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1313:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Smartcard Guard time value (Value between Min_Data=0x00 and Max_Data=0xFF)
1314:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1315:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardGuardTime(USART_TypeDef *USARTx)
1316:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1317:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_GT) >> USART_POSITION_GTPR_GT);
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 25


1318:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1319:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1320:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1321:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
1322:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1323:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1324:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_HalfDuplex Configuration functions related to Half Duplex f
1325:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
1326:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1327:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1328:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1329:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable Single Wire Half-Duplex mode
1330:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1331:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1332:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_EnableHalfDuplex
1333:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1334:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1335:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1336:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
1337:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1338:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
1339:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1340:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1341:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1342:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable Single Wire Half-Duplex mode
1343:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1344:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1345:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_DisableHalfDuplex
1346:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1347:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1348:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1349:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableHalfDuplex(USART_TypeDef *USARTx)
1350:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1351:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
1352:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1353:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1354:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1355:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if Single Wire Half-Duplex mode is enabled
1356:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1357:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1358:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_IsEnabledHalfDuplex
1359:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1360:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1361:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1362:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledHalfDuplex(USART_TypeDef *USARTx)
1363:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1364:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_HDSEL) == (USART_CR3_HDSEL));
1365:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1366:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1367:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1368:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
1369:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1370:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1371:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_LIN Configuration functions related to LIN feature
1372:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
1373:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1374:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 26


1375:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1376:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set LIN Break Detection Length
1377:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1378:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1379:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_SetLINBrkDetectionLen
1380:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1381:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  LINBDLength This parameter can be one of the following values:
1382:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
1383:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
1384:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1385:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1386:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLINBrkDetectionLen(USART_TypeDef *USARTx, uint32_t LINBDLength)
1387:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1388:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBDL, LINBDLength);
1389:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1390:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1391:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1392:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return LIN Break Detection Length
1393:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1394:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1395:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_GetLINBrkDetectionLen
1396:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1397:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1398:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
1399:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
1400:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1401:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLINBrkDetectionLen(USART_TypeDef *USARTx)
1402:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1403:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBDL));
1404:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1405:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1406:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1407:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable LIN mode
1408:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1409:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1410:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_EnableLIN
1411:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1412:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1413:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1414:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableLIN(USART_TypeDef *USARTx)
1415:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1416:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
1417:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1418:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1419:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1420:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable LIN mode
1421:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1422:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1423:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_DisableLIN
1424:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1425:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1426:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1427:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableLIN(USART_TypeDef *USARTx)
1428:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1429:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_LINEN);
1430:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1431:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 27


1432:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1433:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if LIN mode is enabled
1434:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1435:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1436:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_IsEnabledLIN
1437:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1438:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1439:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1440:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledLIN(USART_TypeDef *USARTx)
1441:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1442:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_LINEN) == (USART_CR2_LINEN));
1443:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1444:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1445:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1446:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
1447:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1448:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1449:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_AdvancedConfiguration Advanced Configurations services
1450:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
1451:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1452:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1453:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1454:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Asynchronous Mode (UART)
1455:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   In UART mode, the following bits must be kept cleared:
1456:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1457:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
1458:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1459:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1460:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1461:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1462:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1463:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1464:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1465:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1466:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1467:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Asynchronous Mode
1468:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
1469:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         dedicated functions
1470:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigAsyncMode\n
1471:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigAsyncMode\n
1472:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigAsyncMode\n
1473:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigAsyncMode\n
1474:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigAsyncMode
1475:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1476:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1477:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1478:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
1479:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1480:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* In Asynchronous mode, the following bits must be kept cleared:
1481:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - LINEN, CLKEN bits in the USART_CR2 register,
1482:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
1483:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1484:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
1485:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1486:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1487:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1488:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Synchronous Mode
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 28


1489:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   In Synchronous mode, the following bits must be kept cleared:
1490:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1491:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1492:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1493:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1494:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         This function also sets the USART in Synchronous mode.
1495:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1496:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1497:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1498:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1499:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1500:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1501:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1502:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
1503:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Synchronous Mode
1504:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, Clock Polarity, ...) should be set using
1505:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         dedicated functions
1506:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSyncMode\n
1507:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSyncMode\n
1508:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSyncMode\n
1509:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigSyncMode\n
1510:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSyncMode
1511:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1512:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1513:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1514:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSyncMode(USART_TypeDef *USARTx)
1515:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1516:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* In Synchronous mode, the following bits must be kept cleared:
1517:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - LINEN bit in the USART_CR2 register,
1518:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
1519:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
1520:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
1521:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* set the UART/USART in Synchronous mode */
1522:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
1523:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1524:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1525:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1526:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in LIN Mode
1527:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   In LIN mode, the following bits must be kept cleared:
1528:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
1529:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1530:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1531:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1532:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         This function also set the UART/USART in LIN mode.
1533:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1534:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1535:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1536:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1537:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
1538:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1539:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1540:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1541:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Set LINEN in CR2 using @ref LL_USART_EnableLIN() function
1542:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Other remaining configurations items related to LIN Mode
1543:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (as Baud Rate, Word length, LIN Break Detection Length, ...) should be set using
1544:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         dedicated functions
1545:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_ConfigLINMode\n
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 29


1546:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigLINMode\n
1547:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          LINEN         LL_USART_ConfigLINMode\n
1548:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigLINMode\n
1549:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigLINMode\n
1550:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigLINMode
1551:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1552:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1553:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1554:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigLINMode(USART_TypeDef *USARTx)
1555:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1556:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* In LIN mode, the following bits must be kept cleared:
1557:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - STOP and CLKEN bits in the USART_CR2 register,
1558:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - IREN, SCEN and HDSEL bits in the USART_CR3 register.*/
1559:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_CLKEN | USART_CR2_STOP));
1560:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_SCEN | USART_CR3_HDSEL));
1561:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* Set the UART/USART in LIN mode */
1562:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
1563:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1564:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1565:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1566:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Half Duplex Mode
1567:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   In Half Duplex mode, the following bits must be kept cleared:
1568:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1569:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
1570:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1571:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1572:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         This function also sets the UART/USART in Half Duplex mode.
1573:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1574:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1575:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1576:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1577:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1578:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1579:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1580:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Set HDSEL in CR3 using @ref LL_USART_EnableHalfDuplex() function
1581:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Half Duplex Mode
1582:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
1583:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         dedicated functions
1584:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigHalfDuplexMode\n
1585:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigHalfDuplexMode\n
1586:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigHalfDuplexMode\n
1587:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigHalfDuplexMode\n
1588:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigHalfDuplexMode
1589:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1590:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1591:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1592:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigHalfDuplexMode(USART_TypeDef *USARTx)
1593:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1594:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* In Half Duplex mode, the following bits must be kept cleared:
1595:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - LINEN and CLKEN bits in the USART_CR2 register,
1596:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - SCEN and IREN bits in the USART_CR3 register.*/
1597:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1598:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
1599:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* set the UART/USART in Half Duplex mode */
1600:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
1601:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1602:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 30


1603:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1604:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Smartcard Mode
1605:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   In Smartcard mode, the following bits must be kept cleared:
1606:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1607:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1608:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1609:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         This function also configures Stop bits to 1.5 bits and
1610:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         sets the USART in Smartcard mode (SCEN bit).
1611:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Clock Output is also enabled (CLKEN).
1612:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1613:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1614:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1615:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1616:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1617:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1618:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
1619:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
1620:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Set SCEN in CR3 using @ref LL_USART_EnableSmartcard() function
1621:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Smartcard Mode
1622:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
1623:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         dedicated functions
1624:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSmartcardMode\n
1625:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigSmartcardMode\n
1626:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSmartcardMode\n
1627:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSmartcardMode\n
1628:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSmartcardMode
1629:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1630:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1631:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1632:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSmartcardMode(USART_TypeDef *USARTx)
1633:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1634:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* In Smartcard mode, the following bits must be kept cleared:
1635:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - LINEN bit in the USART_CR2 register,
1636:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - IREN and HDSEL bits in the USART_CR3 register.*/
1637:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
1638:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
1639:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* Configure Stop bits to 1.5 bits */
1640:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* Synchronous mode is activated by default */
1641:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, (USART_CR2_STOP_0 | USART_CR2_STOP_1 | USART_CR2_CLKEN));
1642:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* set the UART/USART in Smartcard mode */
1643:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
1644:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1645:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1646:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1647:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Irda Mode
1648:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   In IRDA mode, the following bits must be kept cleared:
1649:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1650:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
1651:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1652:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1653:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         This function also sets the UART/USART in IRDA mode (IREN bit).
1654:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1655:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1656:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1657:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1658:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1659:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 31


1660:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1661:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
1662:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Set IREN in CR3 using @ref LL_USART_EnableIrda() function
1663:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Irda Mode
1664:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Power mode, ...) should be set using
1665:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         dedicated functions
1666:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigIrdaMode\n
1667:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigIrdaMode\n
1668:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigIrdaMode\n
1669:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigIrdaMode\n
1670:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigIrdaMode\n
1671:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigIrdaMode
1672:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1673:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1674:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1675:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigIrdaMode(USART_TypeDef *USARTx)
1676:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1677:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* In IRDA mode, the following bits must be kept cleared:
1678:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - LINEN, STOP and CLKEN bits in the USART_CR2 register,
1679:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - SCEN and HDSEL bits in the USART_CR3 register.*/
1680:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN | USART_CR2_STOP));
1681:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
1682:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* set the UART/USART in IRDA mode */
1683:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
1684:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1685:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1686:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1687:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Multi processor Mode
1688:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (several USARTs connected in a network, one of the USARTs can be the master,
1689:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         its TX output connected to the RX inputs of the other slaves USARTs).
1690:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   In MultiProcessor mode, the following bits must be kept cleared:
1691:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1692:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
1693:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1694:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1695:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1696:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1697:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1698:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1699:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1700:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1701:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1702:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Multi processor Mode
1703:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (as Baud Rate, Wake Up Method, Node address, ...) should be set using
1704:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         dedicated functions
1705:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigMultiProcessMode\n
1706:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigMultiProcessMode\n
1707:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigMultiProcessMode\n
1708:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigMultiProcessMode\n
1709:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigMultiProcessMode
1710:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1711:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1712:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1713:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigMultiProcessMode(USART_TypeDef *USARTx)
1714:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1715:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* In Multi Processor mode, the following bits must be kept cleared:
1716:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - LINEN and CLKEN bits in the USART_CR2 register,
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 32


1717:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - IREN, SCEN and HDSEL bits in the USART_CR3 register.*/
1718:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1719:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
1720:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1721:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1722:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1723:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
1724:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1725:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1726:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_FLAG_Management FLAG_Management
1727:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
1728:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1729:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1730:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1731:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Parity Error Flag is set or not
1732:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           PE            LL_USART_IsActiveFlag_PE
1733:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1734:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1735:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1736:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_PE(USART_TypeDef *USARTx)
1737:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1738:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
1739:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1740:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1741:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1742:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Framing Error Flag is set or not
1743:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
1744:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1745:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1746:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1747:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(USART_TypeDef *USARTx)
1748:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1749:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
1750:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1751:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1752:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1753:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Noise error detected Flag is set or not
1754:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
1755:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1756:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1757:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1758:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(USART_TypeDef *USARTx)
1759:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1760:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
1761:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1762:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1763:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1764:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART OverRun Error Flag is set or not
1765:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
1766:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1767:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1768:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1769:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
1770:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1771:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
1772:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1773:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 33


1774:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1775:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART IDLE line detected Flag is set or not
1776:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           IDLE          LL_USART_IsActiveFlag_IDLE
1777:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1778:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1779:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1780:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
1781:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1782:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
1783:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1784:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1785:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1786:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Read Data Register Not Empty Flag is set or not
1787:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
1788:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1789:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1790:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1791:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
1792:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1793:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
1794:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1795:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1796:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1797:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Transmission Complete Flag is set or not
1798:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
1799:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1800:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1801:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1802:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
1803:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1804:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
1805:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1806:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1807:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1808:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Transmit Data Register Empty Flag is set or not
1809:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
1810:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1811:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1812:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1813:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
  40              		.loc 2 1813 26 discriminator 1 view .LVU2
  41              	.LBB19:
1814:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1815:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
  42              		.loc 2 1815 3 discriminator 1 view .LVU3
  43              		.loc 2 1815 11 is_stmt 0 discriminator 1 view .LVU4
  44 0000 034B     		ldr	r3, .L3
  45 0002 1B68     		ldr	r3, [r3]
  46              	.LVL1:
  47              		.loc 2 1815 11 discriminator 1 view .LVU5
  48              	.LBE19:
  49              	.LBE18:
  11:Src/bluetooth.c ****   {
  50              		.loc 1 11 9 discriminator 1 view .LVU6
  51 0004 13F0800F 		tst	r3, #128
  52 0008 FAD0     		beq	.L2
  14:Src/bluetooth.c ****   LL_USART_TransmitData8(USART1, data);
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 34


  53              		.loc 1 14 3 is_stmt 1 view .LVU7
  54              	.LVL2:
  55              	.LBB20:
  56              	.LBI20:
1816:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1817:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1818:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1819:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART LIN Break Detection Flag is set or not
1820:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1821:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1822:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           LBD           LL_USART_IsActiveFlag_LBD
1823:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1824:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1825:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1826:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_LBD(USART_TypeDef *USARTx)
1827:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1828:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_LBD) == (USART_SR_LBD));
1829:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1830:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1831:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1832:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART CTS Flag is set or not
1833:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1834:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1835:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           CTS           LL_USART_IsActiveFlag_nCTS
1836:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1837:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1838:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1839:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_nCTS(USART_TypeDef *USARTx)
1840:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1841:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_CTS) == (USART_SR_CTS));
1842:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1843:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1844:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1845:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Send Break Flag is set or not
1846:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          SBK           LL_USART_IsActiveFlag_SBK
1847:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1848:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1849:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1850:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_SBK(USART_TypeDef *USARTx)
1851:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1852:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_SBK) == (USART_CR1_SBK));
1853:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1854:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1855:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1856:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Receive Wake Up from mute mode Flag is set or not
1857:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RWU           LL_USART_IsActiveFlag_RWU
1858:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1859:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1860:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1861:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RWU(USART_TypeDef *USARTx)
1862:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1863:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_RWU) == (USART_CR1_RWU));
1864:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1865:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1866:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1867:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear Parity Error Flag
1868:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 35


1869:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1870:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as
1871:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         NE, FE, ORE, IDLE would also be cleared.
1872:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           PE            LL_USART_ClearFlag_PE
1873:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1874:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1875:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1876:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
1877:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1878:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   __IO uint32_t tmpreg;
1879:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->SR;
1880:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1881:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->DR;
1882:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1883:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1884:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1885:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1886:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear Framing Error Flag
1887:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1888:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1889:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as
1890:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         PE, NE, ORE, IDLE would also be cleared.
1891:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           FE            LL_USART_ClearFlag_FE
1892:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1893:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1894:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1895:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
1896:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1897:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   __IO uint32_t tmpreg;
1898:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->SR;
1899:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1900:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->DR;
1901:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1902:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1903:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1904:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1905:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear Noise detected Flag
1906:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1907:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1908:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as
1909:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         PE, FE, ORE, IDLE would also be cleared.
1910:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           NF            LL_USART_ClearFlag_NE
1911:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1912:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1913:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1914:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
1915:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1916:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   __IO uint32_t tmpreg;
1917:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->SR;
1918:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1919:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->DR;
1920:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1921:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1922:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1923:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1924:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear OverRun Error Flag
1925:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 36


1926:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1927:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as
1928:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         PE, NE, FE, IDLE would also be cleared.
1929:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
1930:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1931:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1932:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1933:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
1934:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1935:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   __IO uint32_t tmpreg;
1936:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->SR;
1937:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1938:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->DR;
1939:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1940:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1941:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1942:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1943:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear IDLE line detected Flag
1944:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1945:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1946:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as
1947:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         PE, NE, FE, ORE would also be cleared.
1948:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           IDLE          LL_USART_ClearFlag_IDLE
1949:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1950:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1951:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1952:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
1953:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1954:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   __IO uint32_t tmpreg;
1955:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->SR;
1956:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1957:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->DR;
1958:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1959:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1960:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1961:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1962:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear Transmission Complete Flag
1963:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           TC            LL_USART_ClearFlag_TC
1964:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1965:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1966:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1967:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
1968:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1969:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   WRITE_REG(USARTx->SR, ~(USART_SR_TC));
1970:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1971:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1972:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1973:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear RX Not Empty Flag
1974:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           RXNE          LL_USART_ClearFlag_RXNE
1975:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1976:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1977:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1978:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_RXNE(USART_TypeDef *USARTx)
1979:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1980:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
1981:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1982:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 37


1983:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1984:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear LIN Break Detection Flag
1985:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1986:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1987:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           LBD           LL_USART_ClearFlag_LBD
1988:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1989:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1990:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1991:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
1992:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1993:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   WRITE_REG(USARTx->SR, ~(USART_SR_LBD));
1994:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1995:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1996:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1997:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear CTS Interrupt Flag
1998:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1999:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2000:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           CTS           LL_USART_ClearFlag_nCTS
2001:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2002:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2003:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2004:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_nCTS(USART_TypeDef *USARTx)
2005:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2006:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   WRITE_REG(USARTx->SR, ~(USART_SR_CTS));
2007:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2008:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2009:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2010:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
2011:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2012:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2013:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_IT_Management IT_Management
2014:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
2015:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2016:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2017:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2018:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable IDLE Interrupt
2019:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
2020:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2021:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2022:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2023:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
2024:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2025:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
2026:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2027:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2028:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2029:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable RX Not Empty Interrupt
2030:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
2031:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2032:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2033:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2034:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
2035:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2036:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
2037:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2038:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2039:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 38


2040:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable Transmission Complete Interrupt
2041:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
2042:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2043:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2044:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2045:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
2046:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2047:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_TCIE);
2048:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2049:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2050:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2051:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable TX Empty Interrupt
2052:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
2053:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2054:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2055:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2056:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
2057:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2058:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
2059:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2060:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2061:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2062:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable Parity Error Interrupt
2063:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_EnableIT_PE
2064:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2065:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2066:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2067:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_PE(USART_TypeDef *USARTx)
2068:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2069:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_PEIE);
2070:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2071:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2072:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2073:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable LIN Break Detection Interrupt
2074:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2075:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2076:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_EnableIT_LBD
2077:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2078:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2079:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2080:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_LBD(USART_TypeDef *USARTx)
2081:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2082:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
2083:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2084:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2085:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2086:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable Error Interrupt
2087:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   When set, Error Interrupt Enable Bit is enabling interrupt generation in case of a fram
2088:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USARTx_SR register).
2089:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           0: Interrupt is inhibited
2090:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           1: An interrupt is generated when FE=1 or ORE=1 or NF=1 in the USARTx_SR register.
2091:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
2092:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2093:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2094:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2095:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
2096:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 39


2097:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_EIE);
2098:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2099:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2100:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2101:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable CTS Interrupt
2102:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2103:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2104:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_EnableIT_CTS
2105:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2106:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2107:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2108:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_CTS(USART_TypeDef *USARTx)
2109:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2110:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_CTSIE);
2111:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2112:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2113:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2114:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable IDLE Interrupt
2115:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_DisableIT_IDLE
2116:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2117:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2118:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2119:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_IDLE(USART_TypeDef *USARTx)
2120:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2121:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
2122:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2123:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2124:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2125:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable RX Not Empty Interrupt
2126:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
2127:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2128:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2129:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2130:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
2131:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2132:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
2133:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2134:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2135:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2136:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable Transmission Complete Interrupt
2137:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
2138:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2139:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2140:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2141:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
2142:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2143:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
2144:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2145:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2146:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2147:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable TX Empty Interrupt
2148:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
2149:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2150:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2151:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2152:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
2153:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 40


2154:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
2155:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2156:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2157:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2158:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable Parity Error Interrupt
2159:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_DisableIT_PE
2160:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2161:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2162:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2163:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_PE(USART_TypeDef *USARTx)
2164:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2165:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
2166:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2167:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2168:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2169:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable LIN Break Detection Interrupt
2170:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2171:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2172:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_DisableIT_LBD
2173:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2174:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2175:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2176:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_LBD(USART_TypeDef *USARTx)
2177:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2178:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
2179:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2180:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2181:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2182:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable Error Interrupt
2183:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   When set, Error Interrupt Enable Bit is enabling interrupt generation in case of a fram
2184:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USARTx_SR register).
2185:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           0: Interrupt is inhibited
2186:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           1: An interrupt is generated when FE=1 or ORE=1 or NF=1 in the USARTx_SR register.
2187:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_DisableIT_ERROR
2188:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2189:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2190:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2191:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
2192:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2193:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
2194:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2195:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2196:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2197:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable CTS Interrupt
2198:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2199:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2200:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
2201:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2202:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2203:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2204:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
2205:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2206:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
2207:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2208:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2209:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2210:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART IDLE Interrupt  source is enabled or disabled.
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 41


2211:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_IsEnabledIT_IDLE
2212:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2213:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2214:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2215:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(USART_TypeDef *USARTx)
2216:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2217:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
2218:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2219:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2220:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2221:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART RX Not Empty Interrupt is enabled or disabled.
2222:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
2223:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2224:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2225:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2226:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
2227:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2228:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
2229:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2230:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2231:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2232:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Transmission Complete Interrupt is enabled or disabled.
2233:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_IsEnabledIT_TC
2234:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2235:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2236:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2237:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TC(USART_TypeDef *USARTx)
2238:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2239:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
2240:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2241:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2242:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2243:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART TX Empty Interrupt is enabled or disabled.
2244:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
2245:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2246:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2247:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2248:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(USART_TypeDef *USARTx)
2249:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2250:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
2251:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2252:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2253:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2254:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Parity Error Interrupt is enabled or disabled.
2255:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_IsEnabledIT_PE
2256:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2257:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2258:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2259:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_PE(USART_TypeDef *USARTx)
2260:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2261:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_PEIE) == (USART_CR1_PEIE));
2262:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2263:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2264:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2265:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART LIN Break Detection Interrupt is enabled or disabled.
2266:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2267:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 42


2268:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_IsEnabledIT_LBD
2269:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2270:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2271:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2272:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_LBD(USART_TypeDef *USARTx)
2273:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2274:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_LBDIE) == (USART_CR2_LBDIE));
2275:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2276:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2277:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2278:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Error Interrupt is enabled or disabled.
2279:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_IsEnabledIT_ERROR
2280:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2281:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2282:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2283:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
2284:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2285:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
2286:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2287:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2288:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2289:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART CTS Interrupt is enabled or disabled.
2290:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2291:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2292:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_IsEnabledIT_CTS
2293:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2294:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2295:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2296:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_CTS(USART_TypeDef *USARTx)
2297:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2298:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_CTSIE) == (USART_CR3_CTSIE));
2299:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2300:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2301:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2302:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
2303:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2304:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2305:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_DMA_Management DMA_Management
2306:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
2307:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2308:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2309:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2310:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable DMA Mode for reception
2311:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
2312:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2313:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2314:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2315:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
2316:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2317:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_DMAR);
2318:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2319:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2320:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2321:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable DMA Mode for reception
2322:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_DisableDMAReq_RX
2323:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2324:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 43


2325:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2326:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
2327:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2328:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
2329:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2330:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2331:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2332:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if DMA Mode is enabled for reception
2333:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_IsEnabledDMAReq_RX
2334:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2335:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2336:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2337:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledDMAReq_RX(USART_TypeDef *USARTx)
2338:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2339:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_DMAR) == (USART_CR3_DMAR));
2340:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2341:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2342:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2343:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable DMA Mode for transmission
2344:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
2345:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2346:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2347:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2348:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
2349:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2350:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_DMAT);
2351:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2352:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2353:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2354:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable DMA Mode for transmission
2355:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          DMAT          LL_USART_DisableDMAReq_TX
2356:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2357:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2358:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2359:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDMAReq_TX(USART_TypeDef *USARTx)
2360:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2361:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_DMAT);
2362:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2363:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2364:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2365:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if DMA Mode is enabled for transmission
2366:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          DMAT          LL_USART_IsEnabledDMAReq_TX
2367:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2368:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2369:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2370:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledDMAReq_TX(USART_TypeDef *USARTx)
2371:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2372:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_DMAT) == (USART_CR3_DMAT));
2373:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2374:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2375:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2376:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Get the data register address used for DMA transfer
2377:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll DR           DR            LL_USART_DMA_GetRegAddr
2378:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Address of Data Register is valid for both Transmit and Receive transfers.
2379:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2380:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Address of data register
2381:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 44


2382:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx)
2383:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2384:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* return address of DR register */
2385:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return ((uint32_t) & (USARTx->DR));
2386:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2387:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2388:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2389:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
2390:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2391:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2392:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Data_Management Data_Management
2393:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
2394:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2395:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2396:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2397:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Read Receiver Data register (Receive Data value, 8 bits)
2398:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll DR           DR            LL_USART_ReceiveData8
2399:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2400:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
2401:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2402:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
2403:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2404:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
2405:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2406:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2407:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2408:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Read Receiver Data register (Receive Data value, 9 bits)
2409:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll DR           DR            LL_USART_ReceiveData9
2410:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2411:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
2412:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2413:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
2414:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2415:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint16_t)(READ_BIT(USARTx->DR, USART_DR_DR));
2416:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2417:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2418:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2419:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Write in Transmitter Data Register (Transmit Data value, 8 bits)
2420:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll DR           DR            LL_USART_TransmitData8
2421:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2422:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  Value between Min_Data=0x00 and Max_Data=0xFF
2423:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2424:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2425:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
  57              		.loc 2 2425 22 view .LVU8
  58              	.LBB21:
2426:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2427:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   USARTx->DR = Value;
  59              		.loc 2 2427 3 view .LVU9
  60              		.loc 2 2427 14 is_stmt 0 view .LVU10
  61 000a 014B     		ldr	r3, .L3
  62 000c 5860     		str	r0, [r3, #4]
  63              	.LVL3:
  64              		.loc 2 2427 14 view .LVU11
  65              	.LBE21:
  66              	.LBE20:
  15:Src/bluetooth.c **** }
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 45


  67              		.loc 1 15 1 view .LVU12
  68 000e 7047     		bx	lr
  69              	.L4:
  70              		.align	2
  71              	.L3:
  72 0010 00100140 		.word	1073811456
  73              		.cfi_endproc
  74              	.LFE860:
  76              		.section	.text.setBackFunction,"ax",%progbits
  77              		.align	1
  78              		.global	setBackFunction
  79              		.syntax unified
  80              		.thumb
  81              		.thumb_func
  82              		.fpu fpv4-sp-d16
  84              	setBackFunction:
  85              	.LVL4:
  86              	.LFB861:
  16:Src/bluetooth.c **** 
  17:Src/bluetooth.c **** void setBackFunction(uint8_t mode)
  18:Src/bluetooth.c **** {
  87              		.loc 1 18 1 is_stmt 1 view -0
  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
  91              		@ link register save eliminated.
  19:Src/bluetooth.c ****   switch (mode)
  92              		.loc 1 19 3 view .LVU14
  93 0000 2138     		subs	r0, r0, #33
  94              	.LVL5:
  95              		.loc 1 19 3 is_stmt 0 view .LVU15
  96 0002 2028     		cmp	r0, #32
  97 0004 65D8     		bhi	.L5
  98 0006 DFE800F0 		tbb	[pc, r0]
  99              	.L8:
 100 000a 11       		.byte	(.L19-.L8)/2
 101 000b 18       		.byte	(.L18-.L8)/2
 102 000c 64       		.byte	(.L5-.L8)/2
 103 000d 64       		.byte	(.L5-.L8)/2
 104 000e 1F       		.byte	(.L17-.L8)/2
 105 000f 26       		.byte	(.L16-.L8)/2
 106 0010 64       		.byte	(.L5-.L8)/2
 107 0011 64       		.byte	(.L5-.L8)/2
 108 0012 64       		.byte	(.L5-.L8)/2
 109 0013 64       		.byte	(.L5-.L8)/2
 110 0014 64       		.byte	(.L5-.L8)/2
 111 0015 64       		.byte	(.L5-.L8)/2
 112 0016 64       		.byte	(.L5-.L8)/2
 113 0017 64       		.byte	(.L5-.L8)/2
 114 0018 64       		.byte	(.L5-.L8)/2
 115 0019 2D       		.byte	(.L15-.L8)/2
 116 001a 34       		.byte	(.L14-.L8)/2
 117 001b 64       		.byte	(.L5-.L8)/2
 118 001c 64       		.byte	(.L5-.L8)/2
 119 001d 64       		.byte	(.L5-.L8)/2
 120 001e 49       		.byte	(.L13-.L8)/2
 121 001f 50       		.byte	(.L12-.L8)/2
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 46


 122 0020 57       		.byte	(.L11-.L8)/2
 123 0021 5E       		.byte	(.L10-.L8)/2
 124 0022 64       		.byte	(.L5-.L8)/2
 125 0023 64       		.byte	(.L5-.L8)/2
 126 0024 64       		.byte	(.L5-.L8)/2
 127 0025 64       		.byte	(.L5-.L8)/2
 128 0026 64       		.byte	(.L5-.L8)/2
 129 0027 64       		.byte	(.L5-.L8)/2
 130 0028 64       		.byte	(.L5-.L8)/2
 131 0029 3B       		.byte	(.L9-.L8)/2
 132 002a 42       		.byte	(.L7-.L8)/2
 133 002b 00       		.p2align 1
 134              	.L19:
  20:Src/bluetooth.c ****   {
  21:Src/bluetooth.c ****   case MODE_BACK_CIRCLE:
  22:Src/bluetooth.c ****     drawshape_function = drawShapeNote;
 135              		.loc 1 22 5 is_stmt 1 view .LVU16
 136              		.loc 1 22 24 is_stmt 0 view .LVU17
 137 002c 294B     		ldr	r3, .L20
 138 002e 2A4A     		ldr	r2, .L20+4
 139 0030 1A60     		str	r2, [r3]
  23:Src/bluetooth.c ****     callback_function = circle;
 140              		.loc 1 23 5 is_stmt 1 view .LVU18
 141              		.loc 1 23 23 is_stmt 0 view .LVU19
 142 0032 2A4B     		ldr	r3, .L20+8
 143 0034 2A4A     		ldr	r2, .L20+12
 144 0036 1A60     		str	r2, [r3]
  24:Src/bluetooth.c ****     break;
 145              		.loc 1 24 5 is_stmt 1 view .LVU20
 146 0038 7047     		bx	lr
 147              	.L18:
  25:Src/bluetooth.c ****   case MODE_BACK_CIRCLE_GRAD:
  26:Src/bluetooth.c ****     drawshape_function = drawShapeNoteGrad;
 148              		.loc 1 26 5 view .LVU21
 149              		.loc 1 26 24 is_stmt 0 view .LVU22
 150 003a 264B     		ldr	r3, .L20
 151 003c 294A     		ldr	r2, .L20+16
 152 003e 1A60     		str	r2, [r3]
  27:Src/bluetooth.c ****     callback_function = circle;
 153              		.loc 1 27 5 is_stmt 1 view .LVU23
 154              		.loc 1 27 23 is_stmt 0 view .LVU24
 155 0040 264B     		ldr	r3, .L20+8
 156 0042 274A     		ldr	r2, .L20+12
 157 0044 1A60     		str	r2, [r3]
  28:Src/bluetooth.c ****     break;
 158              		.loc 1 28 5 is_stmt 1 view .LVU25
 159 0046 7047     		bx	lr
 160              	.L17:
  29:Src/bluetooth.c ****   case MODE_BACK_CROSS:
  30:Src/bluetooth.c ****     drawshape_function = drawShapeNote;
 161              		.loc 1 30 5 view .LVU26
 162              		.loc 1 30 24 is_stmt 0 view .LVU27
 163 0048 224B     		ldr	r3, .L20
 164 004a 234A     		ldr	r2, .L20+4
 165 004c 1A60     		str	r2, [r3]
  31:Src/bluetooth.c ****     callback_function = cross;
 166              		.loc 1 31 5 is_stmt 1 view .LVU28
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 47


 167              		.loc 1 31 23 is_stmt 0 view .LVU29
 168 004e 234B     		ldr	r3, .L20+8
 169 0050 254A     		ldr	r2, .L20+20
 170 0052 1A60     		str	r2, [r3]
  32:Src/bluetooth.c ****     break;
 171              		.loc 1 32 5 is_stmt 1 view .LVU30
 172 0054 7047     		bx	lr
 173              	.L16:
  33:Src/bluetooth.c ****   case MODE_BACK_CROSS_GRAD:
  34:Src/bluetooth.c ****     drawshape_function = drawShapeNoteGrad;
 174              		.loc 1 34 5 view .LVU31
 175              		.loc 1 34 24 is_stmt 0 view .LVU32
 176 0056 1F4B     		ldr	r3, .L20
 177 0058 224A     		ldr	r2, .L20+16
 178 005a 1A60     		str	r2, [r3]
  35:Src/bluetooth.c ****     callback_function = cross;
 179              		.loc 1 35 5 is_stmt 1 view .LVU33
 180              		.loc 1 35 23 is_stmt 0 view .LVU34
 181 005c 1F4B     		ldr	r3, .L20+8
 182 005e 224A     		ldr	r2, .L20+20
 183 0060 1A60     		str	r2, [r3]
  36:Src/bluetooth.c ****     break;
 184              		.loc 1 36 5 is_stmt 1 view .LVU35
 185 0062 7047     		bx	lr
 186              	.L15:
  37:Src/bluetooth.c ****   case MODE_BACK_SQUARE:
  38:Src/bluetooth.c ****     drawshape_function = drawShapeNote;
 187              		.loc 1 38 5 view .LVU36
 188              		.loc 1 38 24 is_stmt 0 view .LVU37
 189 0064 1B4B     		ldr	r3, .L20
 190 0066 1C4A     		ldr	r2, .L20+4
 191 0068 1A60     		str	r2, [r3]
  39:Src/bluetooth.c ****     callback_function = square;
 192              		.loc 1 39 5 is_stmt 1 view .LVU38
 193              		.loc 1 39 23 is_stmt 0 view .LVU39
 194 006a 1C4B     		ldr	r3, .L20+8
 195 006c 1F4A     		ldr	r2, .L20+24
 196 006e 1A60     		str	r2, [r3]
  40:Src/bluetooth.c ****     break;
 197              		.loc 1 40 5 is_stmt 1 view .LVU40
 198 0070 7047     		bx	lr
 199              	.L14:
  41:Src/bluetooth.c ****   case MODE_BACK_SQUARE_GRAD:
  42:Src/bluetooth.c ****     drawshape_function = drawShapeNoteGrad;
 200              		.loc 1 42 5 view .LVU41
 201              		.loc 1 42 24 is_stmt 0 view .LVU42
 202 0072 184B     		ldr	r3, .L20
 203 0074 1B4A     		ldr	r2, .L20+16
 204 0076 1A60     		str	r2, [r3]
  43:Src/bluetooth.c ****     callback_function = square;
 205              		.loc 1 43 5 is_stmt 1 view .LVU43
 206              		.loc 1 43 23 is_stmt 0 view .LVU44
 207 0078 184B     		ldr	r3, .L20+8
 208 007a 1C4A     		ldr	r2, .L20+24
 209 007c 1A60     		str	r2, [r3]
  44:Src/bluetooth.c ****     break;
 210              		.loc 1 44 5 is_stmt 1 view .LVU45
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 48


 211 007e 7047     		bx	lr
 212              	.L9:
  45:Src/bluetooth.c ****   case MODE_BACK_TRIANGLE:
  46:Src/bluetooth.c ****     drawshape_function = drawShapeNote;
 213              		.loc 1 46 5 view .LVU46
 214              		.loc 1 46 24 is_stmt 0 view .LVU47
 215 0080 144B     		ldr	r3, .L20
 216 0082 154A     		ldr	r2, .L20+4
 217 0084 1A60     		str	r2, [r3]
  47:Src/bluetooth.c ****     callback_function = triangle;
 218              		.loc 1 47 5 is_stmt 1 view .LVU48
 219              		.loc 1 47 23 is_stmt 0 view .LVU49
 220 0086 154B     		ldr	r3, .L20+8
 221 0088 194A     		ldr	r2, .L20+28
 222 008a 1A60     		str	r2, [r3]
  48:Src/bluetooth.c ****     break;
 223              		.loc 1 48 5 is_stmt 1 view .LVU50
 224 008c 7047     		bx	lr
 225              	.L7:
  49:Src/bluetooth.c ****   case MODE_BACK_TRIANGLE_GRAD:
  50:Src/bluetooth.c ****     drawshape_function = drawShapeNoteGrad;
 226              		.loc 1 50 5 view .LVU51
 227              		.loc 1 50 24 is_stmt 0 view .LVU52
 228 008e 114B     		ldr	r3, .L20
 229 0090 144A     		ldr	r2, .L20+16
 230 0092 1A60     		str	r2, [r3]
  51:Src/bluetooth.c ****     callback_function = triangle;
 231              		.loc 1 51 5 is_stmt 1 view .LVU53
 232              		.loc 1 51 23 is_stmt 0 view .LVU54
 233 0094 114B     		ldr	r3, .L20+8
 234 0096 164A     		ldr	r2, .L20+28
 235 0098 1A60     		str	r2, [r3]
  52:Src/bluetooth.c ****     break;
 236              		.loc 1 52 5 is_stmt 1 view .LVU55
 237 009a 7047     		bx	lr
 238              	.L13:
  53:Src/bluetooth.c ****   case MODE_BACK_LINES_H:
  54:Src/bluetooth.c ****     drawshape_function = drawShapeNote;
 239              		.loc 1 54 5 view .LVU56
 240              		.loc 1 54 24 is_stmt 0 view .LVU57
 241 009c 0D4B     		ldr	r3, .L20
 242 009e 0E4A     		ldr	r2, .L20+4
 243 00a0 1A60     		str	r2, [r3]
  55:Src/bluetooth.c ****     callback_function = horizontal;
 244              		.loc 1 55 5 is_stmt 1 view .LVU58
 245              		.loc 1 55 23 is_stmt 0 view .LVU59
 246 00a2 0E4B     		ldr	r3, .L20+8
 247 00a4 134A     		ldr	r2, .L20+32
 248 00a6 1A60     		str	r2, [r3]
  56:Src/bluetooth.c ****     break;
 249              		.loc 1 56 5 is_stmt 1 view .LVU60
 250 00a8 7047     		bx	lr
 251              	.L12:
  57:Src/bluetooth.c ****   case MODE_BACK_LINES_H_GRAD:
  58:Src/bluetooth.c ****     drawshape_function = drawShapeNoteGrad;
 252              		.loc 1 58 5 view .LVU61
 253              		.loc 1 58 24 is_stmt 0 view .LVU62
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 49


 254 00aa 0A4B     		ldr	r3, .L20
 255 00ac 0D4A     		ldr	r2, .L20+16
 256 00ae 1A60     		str	r2, [r3]
  59:Src/bluetooth.c ****     callback_function = horizontal;
 257              		.loc 1 59 5 is_stmt 1 view .LVU63
 258              		.loc 1 59 23 is_stmt 0 view .LVU64
 259 00b0 0A4B     		ldr	r3, .L20+8
 260 00b2 104A     		ldr	r2, .L20+32
 261 00b4 1A60     		str	r2, [r3]
  60:Src/bluetooth.c ****     break;
 262              		.loc 1 60 5 is_stmt 1 view .LVU65
 263 00b6 7047     		bx	lr
 264              	.L11:
  61:Src/bluetooth.c ****   case MODE_BACK_LINES_V:
  62:Src/bluetooth.c ****     drawshape_function = drawShapeNote;
 265              		.loc 1 62 5 view .LVU66
 266              		.loc 1 62 24 is_stmt 0 view .LVU67
 267 00b8 064B     		ldr	r3, .L20
 268 00ba 074A     		ldr	r2, .L20+4
 269 00bc 1A60     		str	r2, [r3]
  63:Src/bluetooth.c ****     callback_function = vertical;
 270              		.loc 1 63 5 is_stmt 1 view .LVU68
 271              		.loc 1 63 23 is_stmt 0 view .LVU69
 272 00be 074B     		ldr	r3, .L20+8
 273 00c0 0D4A     		ldr	r2, .L20+36
 274 00c2 1A60     		str	r2, [r3]
  64:Src/bluetooth.c ****     break;
 275              		.loc 1 64 5 is_stmt 1 view .LVU70
 276 00c4 7047     		bx	lr
 277              	.L10:
  65:Src/bluetooth.c ****   case MODE_BACK_LINES_V_GRAD:
  66:Src/bluetooth.c ****     drawshape_function = drawShapeNoteGrad;
 278              		.loc 1 66 5 view .LVU71
 279              		.loc 1 66 24 is_stmt 0 view .LVU72
 280 00c6 034B     		ldr	r3, .L20
 281 00c8 064A     		ldr	r2, .L20+16
 282 00ca 1A60     		str	r2, [r3]
  67:Src/bluetooth.c ****     callback_function = vertical;
 283              		.loc 1 67 5 is_stmt 1 view .LVU73
 284              		.loc 1 67 23 is_stmt 0 view .LVU74
 285 00cc 034B     		ldr	r3, .L20+8
 286 00ce 0A4A     		ldr	r2, .L20+36
 287 00d0 1A60     		str	r2, [r3]
  68:Src/bluetooth.c ****     break;
 288              		.loc 1 68 5 is_stmt 1 view .LVU75
 289              	.L5:
  69:Src/bluetooth.c ****   }
  70:Src/bluetooth.c **** }
 290              		.loc 1 70 1 is_stmt 0 view .LVU76
 291 00d2 7047     		bx	lr
 292              	.L21:
 293              		.align	2
 294              	.L20:
 295 00d4 00000000 		.word	drawshape_function
 296 00d8 00000000 		.word	drawShapeNote
 297 00dc 00000000 		.word	callback_function
 298 00e0 00000000 		.word	circle
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 50


 299 00e4 00000000 		.word	drawShapeNoteGrad
 300 00e8 00000000 		.word	cross
 301 00ec 00000000 		.word	square
 302 00f0 00000000 		.word	triangle
 303 00f4 00000000 		.word	horizontal
 304 00f8 00000000 		.word	vertical
 305              		.cfi_endproc
 306              	.LFE861:
 308              		.section	.text.setColorVariable,"ax",%progbits
 309              		.align	1
 310              		.global	setColorVariable
 311              		.syntax unified
 312              		.thumb
 313              		.thumb_func
 314              		.fpu fpv4-sp-d16
 316              	setColorVariable:
 317              	.LVL6:
 318              	.LFB862:
  71:Src/bluetooth.c **** 
  72:Src/bluetooth.c **** void setColorVariable(uint8_t color)
  73:Src/bluetooth.c **** {
 319              		.loc 1 73 1 is_stmt 1 view -0
 320              		.cfi_startproc
 321              		@ args = 0, pretend = 0, frame = 0
 322              		@ frame_needed = 0, uses_anonymous_args = 0
 323              		@ link register save eliminated.
  74:Src/bluetooth.c ****   switch (color)
 324              		.loc 1 74 3 view .LVU78
 325 0000 5128     		cmp	r0, #81
 326 0002 02D0     		beq	.L23
 327 0004 5228     		cmp	r0, #82
 328 0006 04D0     		beq	.L24
 329 0008 7047     		bx	lr
 330              	.L23:
  75:Src/bluetooth.c ****   {
  76:Src/bluetooth.c ****   case MODE_BACK_COLORS_OG:
  77:Src/bluetooth.c ****     arrColor = &colorOriginal[0];
 331              		.loc 1 77 5 view .LVU79
 332              		.loc 1 77 14 is_stmt 0 view .LVU80
 333 000a 044B     		ldr	r3, .L26
 334 000c 044A     		ldr	r2, .L26+4
 335 000e 1A60     		str	r2, [r3]
  78:Src/bluetooth.c ****     break;
 336              		.loc 1 78 5 is_stmt 1 view .LVU81
 337 0010 7047     		bx	lr
 338              	.L24:
  79:Src/bluetooth.c ****   case MODE_BACK_COLORS_BW:
  80:Src/bluetooth.c ****     arrColor = &colorBW[0];
 339              		.loc 1 80 5 view .LVU82
 340              		.loc 1 80 14 is_stmt 0 view .LVU83
 341 0012 024B     		ldr	r3, .L26
 342 0014 034A     		ldr	r2, .L26+8
 343 0016 1A60     		str	r2, [r3]
  81:Src/bluetooth.c ****     break;
 344              		.loc 1 81 5 is_stmt 1 view .LVU84
  82:Src/bluetooth.c ****   }
  83:Src/bluetooth.c **** }
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 51


 345              		.loc 1 83 1 is_stmt 0 view .LVU85
 346 0018 7047     		bx	lr
 347              	.L27:
 348 001a 00BF     		.align	2
 349              	.L26:
 350 001c 00000000 		.word	arrColor
 351 0020 00000000 		.word	colorOriginal
 352 0024 00000000 		.word	colorBW
 353              		.cfi_endproc
 354              	.LFE862:
 356              		.section	.text.receiveDataBluetooth,"ax",%progbits
 357              		.align	1
 358              		.global	receiveDataBluetooth
 359              		.syntax unified
 360              		.thumb
 361              		.thumb_func
 362              		.fpu fpv4-sp-d16
 364              	receiveDataBluetooth:
 365              	.LVL7:
 366              	.LFB863:
  84:Src/bluetooth.c **** 
  85:Src/bluetooth.c **** void receiveDataBluetooth(const uint8_t *frame_buffer, uint16_t frame_length)
  86:Src/bluetooth.c **** {
 367              		.loc 1 86 1 is_stmt 1 view -0
 368              		.cfi_startproc
 369              		@ args = 0, pretend = 0, frame = 0
 370              		@ frame_needed = 0, uses_anonymous_args = 0
 371              		.loc 1 86 1 is_stmt 0 view .LVU87
 372 0000 10B5     		push	{r4, lr}
 373              	.LCFI0:
 374              		.cfi_def_cfa_offset 8
 375              		.cfi_offset 4, -8
 376              		.cfi_offset 14, -4
 377 0002 0446     		mov	r4, r0
  87:Src/bluetooth.c ****   uint8_t data;
 378              		.loc 1 87 3 is_stmt 1 view .LVU88
  88:Src/bluetooth.c ****   data = *frame_buffer++;
 379              		.loc 1 88 3 view .LVU89
 380              	.LVL8:
 381              		.loc 1 88 8 is_stmt 0 view .LVU90
 382 0004 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 383              	.LVL9:
  89:Src/bluetooth.c ****   drawtext_function = drawNote;
 384              		.loc 1 89 3 is_stmt 1 view .LVU91
 385              		.loc 1 89 21 is_stmt 0 view .LVU92
 386 0006 3D4B     		ldr	r3, .L40
 387 0008 3D4A     		ldr	r2, .L40+4
 388 000a 1A60     		str	r2, [r3]
  90:Src/bluetooth.c ****   switch (data)
 389              		.loc 1 90 3 is_stmt 1 view .LVU93
 390 000c 2028     		cmp	r0, #32
 391 000e 3ED0     		beq	.L29
 392 0010 28D9     		bls	.L38
 393 0012 6028     		cmp	r0, #96
 394 0014 47D0     		beq	.L33
 395 0016 7028     		cmp	r0, #112
 396 0018 51D1     		bne	.L32
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 52


  91:Src/bluetooth.c ****   {
  92:Src/bluetooth.c ****   case SETTINGS_BRIGHT:
  93:Src/bluetooth.c ****     data = *frame_buffer++;
  94:Src/bluetooth.c ****     MAX_BRIGHT = (float)data / 20;
  95:Src/bluetooth.c ****     fillFramebuffer();
  96:Src/bluetooth.c ****     WS2812_sendbuf(24 * NLEDSCH);
  97:Src/bluetooth.c ****     break;
  98:Src/bluetooth.c ****   case MODE_BACK_STATE:
  99:Src/bluetooth.c ****     data = *frame_buffer++;
 100:Src/bluetooth.c ****     MODE_BACK = data;
 101:Src/bluetooth.c ****     clearBack();
 102:Src/bluetooth.c ****     fillFramebuffer();
 103:Src/bluetooth.c ****     WS2812_sendbuf(24 * NLEDSCH);
 104:Src/bluetooth.c ****     break;
 105:Src/bluetooth.c ****   case MODE_TEXT_STATE:
 106:Src/bluetooth.c ****     data = *frame_buffer++;
 107:Src/bluetooth.c ****     MODE_TEXT = data;
 108:Src/bluetooth.c ****     clearText();
 109:Src/bluetooth.c ****     fillFramebuffer();
 110:Src/bluetooth.c ****     WS2812_sendbuf(24 * NLEDSCH);
 111:Src/bluetooth.c ****     break;
 112:Src/bluetooth.c ****   case MODE_CUSTOM:
 113:Src/bluetooth.c ****     data = *frame_buffer++;
 397              		.loc 1 113 5 view .LVU94
 398              	.LVL10:
 399              		.loc 1 113 10 is_stmt 0 view .LVU95
 400 001a 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 401 001c 07EE903A 		vmov	s15, r3	@ int
 402              	.LVL11:
 114:Src/bluetooth.c ****     MAX_BRIGHT = (float)data / 20;
 403              		.loc 1 114 5 is_stmt 1 view .LVU96
 404              		.loc 1 114 18 is_stmt 0 view .LVU97
 405 0020 F8EE677A 		vcvt.f32.u32	s15, s15
 406              		.loc 1 114 30 view .LVU98
 407 0024 F3EE046A 		vmov.f32	s13, #2.0e+1
 408 0028 87EEA67A 		vdiv.f32	s14, s15, s13
 409              		.loc 1 114 16 view .LVU99
 410 002c 354B     		ldr	r3, .L40+8
 411 002e 83ED007A 		vstr.32	s14, [r3]
 412              	.LVL12:
 115:Src/bluetooth.c ****     data = *frame_buffer++;
 413              		.loc 1 115 5 is_stmt 1 view .LVU100
 414              		.loc 1 115 10 is_stmt 0 view .LVU101
 415 0032 A278     		ldrb	r2, [r4, #2]	@ zero_extendqisi2
 416              	.LVL13:
 116:Src/bluetooth.c ****     MODE_BACK = data;
 417              		.loc 1 116 5 is_stmt 1 view .LVU102
 418              		.loc 1 116 15 is_stmt 0 view .LVU103
 419 0034 344B     		ldr	r3, .L40+12
 420 0036 1A70     		strb	r2, [r3]
 117:Src/bluetooth.c ****     data = *frame_buffer++;
 421              		.loc 1 117 5 is_stmt 1 view .LVU104
 422              	.LVL14:
 118:Src/bluetooth.c ****     setBackFunction(data);
 423              		.loc 1 118 5 view .LVU105
 424 0038 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 425 003a FFF7FEFF 		bl	setBackFunction
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 53


 426              	.LVL15:
 119:Src/bluetooth.c ****     data = *frame_buffer++;
 427              		.loc 1 119 5 view .LVU106
 428              		.loc 1 119 10 is_stmt 0 view .LVU107
 429 003e 2279     		ldrb	r2, [r4, #4]	@ zero_extendqisi2
 430              	.LVL16:
 120:Src/bluetooth.c ****     MAX_DIV = data;
 431              		.loc 1 120 5 is_stmt 1 view .LVU108
 432              		.loc 1 120 13 is_stmt 0 view .LVU109
 433 0040 324B     		ldr	r3, .L40+16
 434 0042 1A70     		strb	r2, [r3]
 121:Src/bluetooth.c ****     data = *frame_buffer++;
 435              		.loc 1 121 5 is_stmt 1 view .LVU110
 436              	.LVL17:
 437              		.loc 1 121 10 is_stmt 0 view .LVU111
 438 0044 6279     		ldrb	r2, [r4, #5]	@ zero_extendqisi2
 439              	.LVL18:
 122:Src/bluetooth.c ****     orientation = data;
 440              		.loc 1 122 5 is_stmt 1 view .LVU112
 441              		.loc 1 122 17 is_stmt 0 view .LVU113
 442 0046 324B     		ldr	r3, .L40+20
 443 0048 1A70     		strb	r2, [r3]
 123:Src/bluetooth.c ****     data = *frame_buffer++;
 444              		.loc 1 123 5 is_stmt 1 view .LVU114
 445              	.LVL19:
 446              		.loc 1 123 10 is_stmt 0 view .LVU115
 447 004a A279     		ldrb	r2, [r4, #6]	@ zero_extendqisi2
 448              	.LVL20:
 124:Src/bluetooth.c ****     MODE_TEXT = data;
 449              		.loc 1 124 5 is_stmt 1 view .LVU116
 450              		.loc 1 124 15 is_stmt 0 view .LVU117
 451 004c 314B     		ldr	r3, .L40+24
 452 004e 1A70     		strb	r2, [r3]
 125:Src/bluetooth.c ****     data = *frame_buffer++;
 453              		.loc 1 125 5 is_stmt 1 view .LVU118
 454              	.LVL21:
 126:Src/bluetooth.c ****     setColorVariable(data);
 455              		.loc 1 126 5 view .LVU119
 456 0050 E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 457 0052 FFF7FEFF 		bl	setColorVariable
 458              	.LVL22:
 127:Src/bluetooth.c ****     fillFramebuffer();
 459              		.loc 1 127 5 view .LVU120
 460 0056 FFF7FEFF 		bl	fillFramebuffer
 461              	.LVL23:
 128:Src/bluetooth.c ****     WS2812_sendbuf(24 * NLEDSCH);
 462              		.loc 1 128 5 view .LVU121
 463 005a 4FF44070 		mov	r0, #768
 464 005e FFF7FEFF 		bl	WS2812_sendbuf
 465              	.LVL24:
 129:Src/bluetooth.c ****     break;
 466              		.loc 1 129 5 view .LVU122
 467 0062 13E0     		b	.L28
 468              	.LVL25:
 469              	.L38:
  90:Src/bluetooth.c ****   {
 470              		.loc 1 90 3 is_stmt 0 view .LVU123
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 54


 471 0064 1128     		cmp	r0, #17
 472 0066 2AD1     		bne	.L32
  93:Src/bluetooth.c ****     MAX_BRIGHT = (float)data / 20;
 473              		.loc 1 93 5 is_stmt 1 view .LVU124
 474              	.LVL26:
  93:Src/bluetooth.c ****     MAX_BRIGHT = (float)data / 20;
 475              		.loc 1 93 10 is_stmt 0 view .LVU125
 476 0068 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 477 006a 07EE903A 		vmov	s15, r3	@ int
 478              	.LVL27:
  94:Src/bluetooth.c ****     fillFramebuffer();
 479              		.loc 1 94 5 is_stmt 1 view .LVU126
  94:Src/bluetooth.c ****     fillFramebuffer();
 480              		.loc 1 94 18 is_stmt 0 view .LVU127
 481 006e F8EE677A 		vcvt.f32.u32	s15, s15
  94:Src/bluetooth.c ****     fillFramebuffer();
 482              		.loc 1 94 30 view .LVU128
 483 0072 F3EE046A 		vmov.f32	s13, #2.0e+1
 484 0076 87EEA67A 		vdiv.f32	s14, s15, s13
  94:Src/bluetooth.c ****     fillFramebuffer();
 485              		.loc 1 94 16 view .LVU129
 486 007a 224B     		ldr	r3, .L40+8
 487 007c 83ED007A 		vstr.32	s14, [r3]
 488              	.LVL28:
  95:Src/bluetooth.c ****     WS2812_sendbuf(24 * NLEDSCH);
 489              		.loc 1 95 5 is_stmt 1 view .LVU130
 490 0080 FFF7FEFF 		bl	fillFramebuffer
 491              	.LVL29:
  96:Src/bluetooth.c ****     break;
 492              		.loc 1 96 5 view .LVU131
 493 0084 4FF44070 		mov	r0, #768
 494 0088 FFF7FEFF 		bl	WS2812_sendbuf
 495              	.LVL30:
  97:Src/bluetooth.c ****   case MODE_BACK_STATE:
 496              		.loc 1 97 5 view .LVU132
 497              	.L28:
 130:Src/bluetooth.c ****   default:
 131:Src/bluetooth.c ****     if (data > 0x20 && data < 0x50)
 132:Src/bluetooth.c ****     {
 133:Src/bluetooth.c ****       setBackFunction(data);
 134:Src/bluetooth.c ****       data = *frame_buffer++;
 135:Src/bluetooth.c ****       MAX_DIV = data;
 136:Src/bluetooth.c ****       data = *frame_buffer++;
 137:Src/bluetooth.c ****       orientation = data;
 138:Src/bluetooth.c ****       minihdlc_send_frame(ACK, 1);
 139:Src/bluetooth.c ****     }
 140:Src/bluetooth.c ****     else if (data > 0x50 && data < 0x60)
 141:Src/bluetooth.c ****     {
 142:Src/bluetooth.c ****       setColorVariable(data);
 143:Src/bluetooth.c ****       minihdlc_send_frame(ACK, 1);
 144:Src/bluetooth.c ****     }
 145:Src/bluetooth.c ****     break;
 146:Src/bluetooth.c ****   }
 147:Src/bluetooth.c **** }
 498              		.loc 1 147 1 is_stmt 0 view .LVU133
 499 008c 10BD     		pop	{r4, pc}
 500              	.LVL31:
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 55


 501              	.L29:
  99:Src/bluetooth.c ****     MODE_BACK = data;
 502              		.loc 1 99 5 is_stmt 1 view .LVU134
  99:Src/bluetooth.c ****     MODE_BACK = data;
 503              		.loc 1 99 10 is_stmt 0 view .LVU135
 504 008e 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 505              	.LVL32:
 100:Src/bluetooth.c ****     clearBack();
 506              		.loc 1 100 5 is_stmt 1 view .LVU136
 100:Src/bluetooth.c ****     clearBack();
 507              		.loc 1 100 15 is_stmt 0 view .LVU137
 508 0090 1D4B     		ldr	r3, .L40+12
 509 0092 1A70     		strb	r2, [r3]
 101:Src/bluetooth.c ****     fillFramebuffer();
 510              		.loc 1 101 5 is_stmt 1 view .LVU138
 511 0094 FFF7FEFF 		bl	clearBack
 512              	.LVL33:
 102:Src/bluetooth.c ****     WS2812_sendbuf(24 * NLEDSCH);
 513              		.loc 1 102 5 view .LVU139
 514 0098 FFF7FEFF 		bl	fillFramebuffer
 515              	.LVL34:
 103:Src/bluetooth.c ****     break;
 516              		.loc 1 103 5 view .LVU140
 517 009c 4FF44070 		mov	r0, #768
 518 00a0 FFF7FEFF 		bl	WS2812_sendbuf
 519              	.LVL35:
 104:Src/bluetooth.c ****   case MODE_TEXT_STATE:
 520              		.loc 1 104 5 view .LVU141
 521 00a4 F2E7     		b	.L28
 522              	.LVL36:
 523              	.L33:
 106:Src/bluetooth.c ****     MODE_TEXT = data;
 524              		.loc 1 106 5 view .LVU142
 106:Src/bluetooth.c ****     MODE_TEXT = data;
 525              		.loc 1 106 10 is_stmt 0 view .LVU143
 526 00a6 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 527              	.LVL37:
 107:Src/bluetooth.c ****     clearText();
 528              		.loc 1 107 5 is_stmt 1 view .LVU144
 107:Src/bluetooth.c ****     clearText();
 529              		.loc 1 107 15 is_stmt 0 view .LVU145
 530 00a8 1A4B     		ldr	r3, .L40+24
 531 00aa 1A70     		strb	r2, [r3]
 108:Src/bluetooth.c ****     fillFramebuffer();
 532              		.loc 1 108 5 is_stmt 1 view .LVU146
 533 00ac FFF7FEFF 		bl	clearText
 534              	.LVL38:
 109:Src/bluetooth.c ****     WS2812_sendbuf(24 * NLEDSCH);
 535              		.loc 1 109 5 view .LVU147
 536 00b0 FFF7FEFF 		bl	fillFramebuffer
 537              	.LVL39:
 110:Src/bluetooth.c ****     break;
 538              		.loc 1 110 5 view .LVU148
 539 00b4 4FF44070 		mov	r0, #768
 540 00b8 FFF7FEFF 		bl	WS2812_sendbuf
 541              	.LVL40:
 111:Src/bluetooth.c ****   case MODE_CUSTOM:
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 56


 542              		.loc 1 111 5 view .LVU149
 543 00bc E6E7     		b	.L28
 544              	.LVL41:
 545              	.L32:
 131:Src/bluetooth.c ****     {
 546              		.loc 1 131 5 view .LVU150
 131:Src/bluetooth.c ****     {
 547              		.loc 1 131 21 is_stmt 0 view .LVU151
 548 00be A0F12103 		sub	r3, r0, #33
 549 00c2 DBB2     		uxtb	r3, r3
 131:Src/bluetooth.c ****     {
 550              		.loc 1 131 8 view .LVU152
 551 00c4 2E2B     		cmp	r3, #46
 552 00c6 0BD9     		bls	.L39
 140:Src/bluetooth.c ****     {
 553              		.loc 1 140 10 is_stmt 1 view .LVU153
 140:Src/bluetooth.c ****     {
 554              		.loc 1 140 26 is_stmt 0 view .LVU154
 555 00c8 A0F15103 		sub	r3, r0, #81
 556 00cc DBB2     		uxtb	r3, r3
 140:Src/bluetooth.c ****     {
 557              		.loc 1 140 13 view .LVU155
 558 00ce 0E2B     		cmp	r3, #14
 559 00d0 DCD8     		bhi	.L28
 142:Src/bluetooth.c ****       minihdlc_send_frame(ACK, 1);
 560              		.loc 1 142 7 is_stmt 1 view .LVU156
 561 00d2 FFF7FEFF 		bl	setColorVariable
 562              	.LVL42:
 143:Src/bluetooth.c ****     }
 563              		.loc 1 143 7 view .LVU157
 564 00d6 0121     		movs	r1, #1
 565 00d8 0846     		mov	r0, r1
 566 00da FFF7FEFF 		bl	minihdlc_send_frame
 567              	.LVL43:
 568              		.loc 1 147 1 is_stmt 0 view .LVU158
 569 00de D5E7     		b	.L28
 570              	.LVL44:
 571              	.L39:
 133:Src/bluetooth.c ****       data = *frame_buffer++;
 572              		.loc 1 133 7 is_stmt 1 view .LVU159
 573 00e0 FFF7FEFF 		bl	setBackFunction
 574              	.LVL45:
 134:Src/bluetooth.c ****       MAX_DIV = data;
 575              		.loc 1 134 7 view .LVU160
 134:Src/bluetooth.c ****       MAX_DIV = data;
 576              		.loc 1 134 12 is_stmt 0 view .LVU161
 577 00e4 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 578              	.LVL46:
 135:Src/bluetooth.c ****       data = *frame_buffer++;
 579              		.loc 1 135 7 is_stmt 1 view .LVU162
 135:Src/bluetooth.c ****       data = *frame_buffer++;
 580              		.loc 1 135 15 is_stmt 0 view .LVU163
 581 00e6 094B     		ldr	r3, .L40+16
 582 00e8 1A70     		strb	r2, [r3]
 136:Src/bluetooth.c ****       orientation = data;
 583              		.loc 1 136 7 is_stmt 1 view .LVU164
 584              	.LVL47:
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 57


 136:Src/bluetooth.c ****       orientation = data;
 585              		.loc 1 136 12 is_stmt 0 view .LVU165
 586 00ea A278     		ldrb	r2, [r4, #2]	@ zero_extendqisi2
 587              	.LVL48:
 137:Src/bluetooth.c ****       minihdlc_send_frame(ACK, 1);
 588              		.loc 1 137 7 is_stmt 1 view .LVU166
 137:Src/bluetooth.c ****       minihdlc_send_frame(ACK, 1);
 589              		.loc 1 137 19 is_stmt 0 view .LVU167
 590 00ec 084B     		ldr	r3, .L40+20
 591 00ee 1A70     		strb	r2, [r3]
 138:Src/bluetooth.c ****     }
 592              		.loc 1 138 7 is_stmt 1 view .LVU168
 593 00f0 0121     		movs	r1, #1
 594 00f2 0846     		mov	r0, r1
 595 00f4 FFF7FEFF 		bl	minihdlc_send_frame
 596              	.LVL49:
 138:Src/bluetooth.c ****     }
 597              		.loc 1 138 7 is_stmt 0 view .LVU169
 598 00f8 C8E7     		b	.L28
 599              	.L41:
 600 00fa 00BF     		.align	2
 601              	.L40:
 602 00fc 00000000 		.word	drawtext_function
 603 0100 00000000 		.word	drawNote
 604 0104 00000000 		.word	MAX_BRIGHT
 605 0108 00000000 		.word	MODE_BACK
 606 010c 00000000 		.word	MAX_DIV
 607 0110 00000000 		.word	orientation
 608 0114 00000000 		.word	MODE_TEXT
 609              		.cfi_endproc
 610              	.LFE863:
 612              		.section	.text.startReception,"ax",%progbits
 613              		.align	1
 614              		.global	startReception
 615              		.syntax unified
 616              		.thumb
 617              		.thumb_func
 618              		.fpu fpv4-sp-d16
 620              	startReception:
 621              	.LFB864:
 148:Src/bluetooth.c **** 
 149:Src/bluetooth.c **** void startReception(void)
 150:Src/bluetooth.c **** {
 622              		.loc 1 150 1 is_stmt 1 view -0
 623              		.cfi_startproc
 624              		@ args = 0, pretend = 0, frame = 16
 625              		@ frame_needed = 0, uses_anonymous_args = 0
 626 0000 00B5     		push	{lr}
 627              	.LCFI1:
 628              		.cfi_def_cfa_offset 4
 629              		.cfi_offset 14, -4
 630 0002 85B0     		sub	sp, sp, #20
 631              	.LCFI2:
 632              		.cfi_def_cfa_offset 24
 151:Src/bluetooth.c ****   minihdlc_init(sendDataBluetooth, receiveDataBluetooth);
 633              		.loc 1 151 3 view .LVU171
 634 0004 1049     		ldr	r1, .L44
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 58


 635 0006 1148     		ldr	r0, .L44+4
 636 0008 FFF7FEFF 		bl	minihdlc_init
 637              	.LVL50:
 152:Src/bluetooth.c ****   /* Clear Overrun flag, in case characters have already been sent to USART */
 153:Src/bluetooth.c ****   LL_USART_ClearFlag_ORE(USART1);
 638              		.loc 1 153 3 view .LVU172
 639              	.LBB22:
 640              	.LBI22:
1933:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 641              		.loc 2 1933 22 view .LVU173
 642              	.LBB23:
1935:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->SR;
 643              		.loc 2 1935 3 view .LVU174
1936:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
 644              		.loc 2 1936 3 view .LVU175
1936:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
 645              		.loc 2 1936 18 is_stmt 0 view .LVU176
 646 000c 104B     		ldr	r3, .L44+8
 647 000e 1A68     		ldr	r2, [r3]
1936:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
 648              		.loc 2 1936 10 view .LVU177
 649 0010 0092     		str	r2, [sp]
1937:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->DR;
 650              		.loc 2 1937 3 is_stmt 1 view .LVU178
 651 0012 009A     		ldr	r2, [sp]
1938:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
 652              		.loc 2 1938 3 view .LVU179
1938:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
 653              		.loc 2 1938 18 is_stmt 0 view .LVU180
 654 0014 5A68     		ldr	r2, [r3, #4]
1938:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
 655              		.loc 2 1938 10 view .LVU181
 656 0016 0092     		str	r2, [sp]
1939:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 657              		.loc 2 1939 3 is_stmt 1 view .LVU182
 658 0018 009A     		ldr	r2, [sp]
 659              	.LVL51:
1939:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 660              		.loc 2 1939 3 is_stmt 0 view .LVU183
 661              	.LBE23:
 662              	.LBE22:
 154:Src/bluetooth.c **** 
 155:Src/bluetooth.c ****   /* Enable RXNE and Error interrupts */
 156:Src/bluetooth.c ****   LL_USART_EnableIT_RXNE(USART1);
 663              		.loc 1 156 3 is_stmt 1 view .LVU184
 664              	.LBB24:
 665              	.LBI24:
2034:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 666              		.loc 2 2034 22 view .LVU185
 667              	.LBB25:
2036:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 668              		.loc 2 2036 3 view .LVU186
 669 001a DA68     		ldr	r2, [r3, #12]
 670 001c 42F02002 		orr	r2, r2, #32
 671 0020 DA60     		str	r2, [r3, #12]
 672              	.LVL52:
2036:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 59


 673              		.loc 2 2036 3 is_stmt 0 view .LVU187
 674              	.LBE25:
 675              	.LBE24:
 157:Src/bluetooth.c ****   LL_USART_EnableIT_ERROR(USART1);
 676              		.loc 1 157 3 is_stmt 1 view .LVU188
 677              	.LBB26:
 678              	.LBI26:
2095:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 679              		.loc 2 2095 22 view .LVU189
 680              	.LBB27:
2097:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 681              		.loc 2 2097 3 view .LVU190
 682 0022 5A69     		ldr	r2, [r3, #20]
 683 0024 42F00102 		orr	r2, r2, #1
 684 0028 5A61     		str	r2, [r3, #20]
 685              	.LVL53:
2097:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 686              		.loc 2 2097 3 is_stmt 0 view .LVU191
 687              	.LBE27:
 688              	.LBE26:
 158:Src/bluetooth.c ****   uint8_t buffer[] = "OLA amigo!";
 689              		.loc 1 158 3 is_stmt 1 view .LVU192
 690              		.loc 1 158 11 is_stmt 0 view .LVU193
 691 002a 0A4A     		ldr	r2, .L44+12
 692 002c 01AB     		add	r3, sp, #4
 693 002e 07CA     		ldm	r2, {r0, r1, r2}
 694 0030 03C3     		stmia	r3!, {r0, r1}
 695 0032 23F8022B 		strh	r2, [r3], #2	@ movhi
 696 0036 120C     		lsrs	r2, r2, #16
 697 0038 1A70     		strb	r2, [r3]
 159:Src/bluetooth.c **** 
 160:Src/bluetooth.c ****   minihdlc_send_frame(buffer, ARRAY_LEN(buffer));
 698              		.loc 1 160 3 is_stmt 1 view .LVU194
 699 003a 0B21     		movs	r1, #11
 700 003c 01A8     		add	r0, sp, #4
 701 003e FFF7FEFF 		bl	minihdlc_send_frame
 702              	.LVL54:
 161:Src/bluetooth.c **** }
 703              		.loc 1 161 1 is_stmt 0 view .LVU195
 704 0042 05B0     		add	sp, sp, #20
 705              	.LCFI3:
 706              		.cfi_def_cfa_offset 4
 707              		@ sp needed
 708 0044 5DF804FB 		ldr	pc, [sp], #4
 709              	.L45:
 710              		.align	2
 711              	.L44:
 712 0048 00000000 		.word	receiveDataBluetooth
 713 004c 00000000 		.word	sendDataBluetooth
 714 0050 00100140 		.word	1073811456
 715 0054 00000000 		.word	.LC0
 716              		.cfi_endproc
 717              	.LFE864:
 719              		.section	.text.USART1_IRQHandler,"ax",%progbits
 720              		.align	1
 721              		.global	USART1_IRQHandler
 722              		.syntax unified
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 60


 723              		.thumb
 724              		.thumb_func
 725              		.fpu fpv4-sp-d16
 727              	USART1_IRQHandler:
 728              	.LFB865:
 162:Src/bluetooth.c **** 
 163:Src/bluetooth.c **** void USART1_IRQHandler(void)
 164:Src/bluetooth.c **** {
 729              		.loc 1 164 1 is_stmt 1 view -0
 730              		.cfi_startproc
 731              		@ args = 0, pretend = 0, frame = 0
 732              		@ frame_needed = 0, uses_anonymous_args = 0
 165:Src/bluetooth.c ****   uint8_t RxBuffer;
 733              		.loc 1 165 3 view .LVU197
 166:Src/bluetooth.c ****   if (LL_USART_IsActiveFlag_RXNE(USART1) && LL_USART_IsEnabledIT_RXNE(USART1))
 734              		.loc 1 166 3 view .LVU198
 735              	.LVL55:
 736              	.LBB28:
 737              	.LBI28:
1791:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 738              		.loc 2 1791 26 view .LVU199
 739              	.LBB29:
1793:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 740              		.loc 2 1793 3 view .LVU200
1793:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 741              		.loc 2 1793 11 is_stmt 0 view .LVU201
 742 0000 0A4B     		ldr	r3, .L53
 743 0002 1B68     		ldr	r3, [r3]
 744              	.LVL56:
1793:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 745              		.loc 2 1793 11 view .LVU202
 746              	.LBE29:
 747              	.LBE28:
 748              		.loc 1 166 6 view .LVU203
 749 0004 13F0200F 		tst	r3, #32
 750 0008 04D0     		beq	.L49
 751              	.LVL57:
 752              	.LBB30:
 753              	.LBI30:
2226:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 754              		.loc 2 2226 26 is_stmt 1 view .LVU204
 755              	.LBB31:
2228:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 756              		.loc 2 2228 3 view .LVU205
2228:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 757              		.loc 2 2228 11 is_stmt 0 view .LVU206
 758 000a 084B     		ldr	r3, .L53
 759 000c DB68     		ldr	r3, [r3, #12]
 760              	.LVL58:
2228:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 761              		.loc 2 2228 11 view .LVU207
 762              	.LBE31:
 763              	.LBE30:
 764              		.loc 1 166 42 view .LVU208
 765 000e 13F0200F 		tst	r3, #32
 766 0012 00D1     		bne	.L52
 767              	.L49:
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 61


 768 0014 7047     		bx	lr
 769              	.L52:
 164:Src/bluetooth.c ****   uint8_t RxBuffer;
 770              		.loc 1 164 1 view .LVU209
 771 0016 10B5     		push	{r4, lr}
 772              	.LCFI4:
 773              		.cfi_def_cfa_offset 8
 774              		.cfi_offset 4, -8
 775              		.cfi_offset 14, -4
 167:Src/bluetooth.c ****   {
 168:Src/bluetooth.c ****     // LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_13);
 169:Src/bluetooth.c ****     RxBuffer = LL_USART_ReceiveData8(USART1);
 776              		.loc 1 169 5 is_stmt 1 view .LVU210
 777              	.LVL59:
 778              	.LBB32:
 779              	.LBI32:
2402:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 780              		.loc 2 2402 25 view .LVU211
 781              	.LBB33:
2404:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 782              		.loc 2 2404 3 view .LVU212
2404:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 783              		.loc 2 2404 20 is_stmt 0 view .LVU213
 784 0018 044B     		ldr	r3, .L53
 785 001a 5C68     		ldr	r4, [r3, #4]
2404:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 786              		.loc 2 2404 10 view .LVU214
 787 001c E4B2     		uxtb	r4, r4
 788              	.LVL60:
2404:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 789              		.loc 2 2404 10 view .LVU215
 790              	.LBE33:
 791              	.LBE32:
 170:Src/bluetooth.c ****     minihdlc_char_receiver(RxBuffer);
 792              		.loc 1 170 5 is_stmt 1 view .LVU216
 793 001e 2046     		mov	r0, r4
 794 0020 FFF7FEFF 		bl	minihdlc_char_receiver
 795              	.LVL61:
 171:Src/bluetooth.c ****     sendDataBluetooth(RxBuffer);
 796              		.loc 1 171 5 view .LVU217
 797 0024 2046     		mov	r0, r4
 798 0026 FFF7FEFF 		bl	sendDataBluetooth
 799              	.LVL62:
 172:Src/bluetooth.c ****   }
 173:Src/bluetooth.c **** }
 800              		.loc 1 173 1 is_stmt 0 view .LVU218
 801 002a 10BD     		pop	{r4, pc}
 802              	.LVL63:
 803              	.L54:
 804              		.loc 1 173 1 view .LVU219
 805              		.align	2
 806              	.L53:
 807 002c 00100140 		.word	1073811456
 808              		.cfi_endproc
 809              	.LFE865:
 811              		.comm	WS2812_IO_framedata,1536,4
 812              		.comm	textColor,3,4
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 62


 813              		.comm	backColor,3,4
 814              		.comm	textLayer,768,4
 815              		.comm	backLayer,768,4
 816              		.section	.rodata.startReception.str1.4,"aMS",%progbits,1
 817              		.align	2
 818              	.LC0:
 819 0000 4F4C4120 		.ascii	"OLA amigo!\000"
 819      616D6967 
 819      6F2100
 820              		.text
 821              	.Letext0:
 822              		.file 3 "/Users/luissousa/opt/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/machine/_def
 823              		.file 4 "/Users/luissousa/opt/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/_stdint.
 824              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 825              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 826              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xc.h"
 827              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h"
 828              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_tim.h"
 829              		.file 10 "Inc/definitions.h"
 830              		.file 11 "Inc/draw.h"
 831              		.file 12 "Inc/ws2812.h"
 832              		.file 13 "Src/minihdlc-master/minihdlc.h"
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 63


DEFINED SYMBOLS
                            *ABS*:0000000000000000 bluetooth.c
/var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s:18     .text.sendDataBluetooth:0000000000000000 $t
/var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s:26     .text.sendDataBluetooth:0000000000000000 sendDataBluetooth
/var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s:72     .text.sendDataBluetooth:0000000000000010 $d
/var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s:77     .text.setBackFunction:0000000000000000 $t
/var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s:84     .text.setBackFunction:0000000000000000 setBackFunction
/var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s:100    .text.setBackFunction:000000000000000a $d
/var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s:295    .text.setBackFunction:00000000000000d4 $d
/var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s:309    .text.setColorVariable:0000000000000000 $t
/var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s:316    .text.setColorVariable:0000000000000000 setColorVariable
/var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s:350    .text.setColorVariable:000000000000001c $d
/var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s:357    .text.receiveDataBluetooth:0000000000000000 $t
/var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s:364    .text.receiveDataBluetooth:0000000000000000 receiveDataBluetooth
/var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s:602    .text.receiveDataBluetooth:00000000000000fc $d
/var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s:613    .text.startReception:0000000000000000 $t
/var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s:620    .text.startReception:0000000000000000 startReception
/var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s:712    .text.startReception:0000000000000048 $d
/var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s:720    .text.USART1_IRQHandler:0000000000000000 $t
/var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s:727    .text.USART1_IRQHandler:0000000000000000 USART1_IRQHandler
/var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s:807    .text.USART1_IRQHandler:000000000000002c $d
                            *COM*:0000000000000600 WS2812_IO_framedata
                            *COM*:0000000000000003 textColor
                            *COM*:0000000000000003 backColor
                            *COM*:0000000000000300 textLayer
                            *COM*:0000000000000300 backLayer
/var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s:817    .rodata.startReception.str1.4:0000000000000000 $d
/var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s:133    .text.setBackFunction:000000000000002b $d
/var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s:133    .text.setBackFunction:000000000000002c $t

UNDEFINED SYMBOLS
drawshape_function
drawShapeNote
callback_function
circle
drawShapeNoteGrad
cross
square
triangle
horizontal
vertical
arrColor
colorOriginal
colorBW
fillFramebuffer
WS2812_sendbuf
clearBack
clearText
minihdlc_send_frame
drawtext_function
drawNote
MAX_BRIGHT
MODE_BACK
MAX_DIV
orientation
MODE_TEXT
minihdlc_init
ARM GAS  /var/folders/hv/f19l0kw128sbpybv1h43gz3c0000gn/T//ccxVpUCo.s 			page 64


minihdlc_char_receiver
